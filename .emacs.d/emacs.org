#+STARTUP: overview
# Emacs-konfiguraatio tiedosto
# Author: Tommi Salenius
# Created: La 9.6.2018
# License: GPL (2018)
# ---
Tämän tiedoston tarkoituksena on auttaa pitämään Emacs-kustomoinnit
hyvin organisoituna. Ideana on, että ohjelman käynnistyessä ajettava
[[file:/Users/tommi/.emacs.d/init.el][init.el-tiedosto]] ajaa läpi komennon, joka parsii tässä tiedostossa olevat
Elisp-komennot ja ajaa ne sitten Lisp-tulkin läpi asiaankuuluvin seurauksin.

* Yleiset asetukset  
** Kieli
Aseta kieli siten, että oletuksenomaisesti UTF-8-merkintätapa pätee.

#+BEGIN_SRC emacs-lisp

(set-language-environment "UTF-8") (set-default-coding-systems 'utf-8)
(set-locale-environment "fi_FI.UTF-8")

#+END_SRC 
** Työkalurivi ja valikkorivi
Piilota työkalurivi oletusarvoisesti. Valikkoriviä ei tarvitse piilottaa, koska
Macissa se on sijoitettuna automaattisesti ikkunan yläpuolella sijaitsevaan
palkkiin jota ei voi poistaa.

#+BEGIN_SRC emacs-lisp

(tool-bar-mode -1)

#+END_SRC 
** Aloitusbuffer
Aseta oletusarvoisesti niin, että Emacsin default-aloitusbufferi
ei pomppaa kuvaan kun ohjelma avataan. Sen sijaan scratch-bufferi toimii
avausikkunana.

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-screen t)

#+END_SRC 
** Meta + X -substituutti (Smex)
Alt + x -yhdistelmä on ergonomisesti aivan karsea. Tee näppäinyhdistelmä, jossa
voidaan saada helpommin menu / valikko / funktiovalikko käyttöön. Olen alkanut
käyttämään tässä pakettia smex, jonka avulla saadaan ido-tyyppinen älykäs autocompletion
funktiovalikkoon. 


#+BEGIN_SRC emacs-lisp

  (define-key key-translation-map (kbd "åe") (kbd "M-x"))
  (define-key key-translation-map (kbd "åE") (kbd "M-X"))
  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC 

** Rivinumerot
Emacsissa ei ole oletuksena rivinumeroita. Tämän avulla ne näkyvät.

#+BEGIN_SRC emacs-lisp

(global-linum-mode t)

#+END_SRC 

** Varmuuskopiot / backupit
Oletusarvoisesti kaikki backup-tiedostot menevät samaan kansioon kuin alkuperäis-
tiedostotkin. Luo kaikille tiedostoille yhtenäinen backup-kansio tilanteen helpottamiseksi.

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '(("." . "/Users/tommi/.emacs.d/backup")))

#+END_SRC 

** Merkkiääni
Hiljennä editoreissa tyypillisesti oleva merkkiääni, joka soi esim. kun kursori
on jo rivin alussa/lopussa ja yrittää siirtyä siitä eteenpäin.

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function 'ignore)

#+END_SRC 

** Näytä kellonaika
Tämän ansiosta kellonaika ja pvm näkyvät helposti. Katso vielä formatointi
uusiksi kunnolla (24-h ajanotto jne).

#+BEGIN_SRC emacs-lisp

(display-time-mode 1)


#+END_SRC 

** Terminaali / shell
Aseta oletusarvoisesti zsh terminaaliksi, joka avataan kun käsky annetaan.

#+BEGIN_SRC emacs-lisp

(setq explicit-shell-file-name "/bin/zsh")

#+END_SRC 

** Teema
Valitse teematiedosto, jota haluat käyttää. 

#+BEGIN_SRC emacs-lisp

(load-theme 'misterioso)

#+END_SRC 
** Kursori
Aseta kursorin väri fiksummaksi kuin oletusarvo. Voit vaihtaa värin
laittamalla heksadesimaalisen värikoodin muodossa _hxväri_, jossa väri
voi olla mikä tahansa kuten punainen, limenvihreä jne; abbrev-mode
korjaa tämän jälkeen värin heksadesimaalinumeroksi

#+BEGIN_SRC emacs-lisp

(set-cursor-color "#c8a2c8")

#+END_SRC 

** Statusbar
Powerline-paketilla alla olevan palkin saa parempaan kuosiin.
*** Powerline
#+BEGIN_SRC emacs-lisp

(require 'powerline)

#+END_SRC 

*** Teema
#+BEGIN_SRC emacs-lisp

  (setq powerline-arrow-shape 'curve)

  (custom-set-faces
   '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
   '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

  (set-face-attribute 'mode-line nil
		      :background "OliveDrab3"
		      :box nil)

  (setq powerline-color1 "grey22")
  (setq powerline-color2 "grey40")


#+END_SRC 

* Globaalit muuttujat
Tässä olevien muuttujien on tarkoitus kuvata näppäinyhdistelmiä, jotka toimivat kaikissa mahdollisissa
tiloissa - tavallisten tekstitiedostojen lisäksi komentojen tulisi toimia Info, Help, Completions, Package Menu yms
moodeissa, joihin käyttäjällä ei ole tavallisia kirjoitusoikeuksia, ja siten Evil-moden kautta tapahtuvat yhdistelmät ovat
riittämättömiä. _Pidä tämä osio aina mahdollisimman ylhäällä!_
** Bufferit

#+BEGIN_SRC emacs-lisp

(setq buffer-valikko "öb")
(setq tapa-aukioleva-buffer "öä")
(setq seuraava-buffer "C-j")
(setq edellinen-buffer "C-k")

#+END_SRC 

** Ikkunat
#+BEGIN_SRC emacs-lisp

(setq pilko-ikkuna-horisontaalisesti "öwh")
(setq pilko-ikkuna-vertikaalisesti "öwv")
(setq poista-aktiivinen-ikkuna "ökt")
(setq poista-muut-ikkunat "öka")

#+END_SRC 

* Evil-mode
** Mahdollista paketit
Evil-mode mahdollistaa Vim-tyyppisten näppäinyhdistelmien käytön.

#+BEGIN_SRC emacs-lisp

(require 'evil)
(evil-mode 1)

#+END_SRC

** Makrot
#+BEGIN_SRC emacs-lisp

(defmacro evil/n (key func)
`(define-key evil-normal-state-map (kbd ,key) (quote ,func)))

(defmacro evil/i (key body)
`(define-key evil-insert-state-map (kbd ,key) (lambda() (interactive)(,@body))))

#+END_SRC 

** Normal-mode
*** Tiedoston sisällä liikkuminen
Seuraavat näppäinoikotiet on tarkoitettu helpottamaan liikkumista saman
bufferin ja ikkunan sisällä.

#+BEGIN_SRC emacs-lisp

(evil/n "§" end-of-line) ; Mene rivin loppuun
(evil/n "zj" evil-scroll-down)
(evil/n "zk" evil-scroll-up)
(evil/n "'" evil-search-forward) ; Aseta ' että voi etsiä eteenpäin
(evil/n "+" evil-search-backward) ; Aseta ' että voi etsiä taaksepäin

#+END_SRC 

*** Ikkunat
Hallitse ikkunoita ja liiku niiden välillä

#+BEGIN_SRC emacs-lisp

(evil/n "öö" ace-window) ; Mahdollista liikkuminen ikkunoiden välillä
(evil/n pilko-ikkuna-horisontaalisesti split-window-horizontally)
(evil/n pilko-ikkuna-vertikaalisesti split-window-vertically)
(evil/n poista-aktiivinen-ikkuna delete-window)
(evil/n poista-muut-ikkunat delete-other-windows)

#+END_SRC 

*** Bufferit
Hallitse buffereita ja liiku niiden välillä

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "ås" 'save-buffer) ; Tallenna tiedosto
(define-key evil-normal-state-map (kbd buffer-valikko) 'buffer-menu)
(define-key evil-normal-state-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer)
(define-key evil-normal-state-map (kbd seuraava-buffer) 'evil-next-buffer)
(define-key evil-normal-state-map (kbd edellinen-buffer) 'evil-prev-buffer)

#+END_SRC 
 
*** Makrot
Käytä tätä komentoa makron ajamiseen.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "ää" 'evil-execute-macro) ; Aja makro

#+END_SRC 

*** Tiedostojen hakeminen
Näillä komennoilla voidaan hakea tiedostoja joko yleisessä merkityksessä, tai
sitten jotain tiettyjä usein haettavia tiedostoja, jotka tarvitsevat itsessään
oman näppäinoikotien.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(define-key evil-normal-state-map "gf" 'find-file)
;;(define-key evil-normal-state-map "öi" (lambda () (interactive)(find-file "/Users/tommi/.emacs.d/emacs.org")))
;; Käytä mieluummin 'E -yhdistelmää päästäksesi tänne
#+END_SRC 

*** Tekstin muokkaus
Näillä komennoilla voi tehdä muokkauksia tekstiin ilman, että tarvitsee
siirtyä Insert-modeen

#+BEGIN_SRC emacs-lisp

(evil/n "C-ö" comment-line) ; Kommentoi tai unkommentoi rivi

#+END_SRC 

*** Yas-snippets
Luo uusia Yas-snippettejä, jotka ovat moodispesifejä

#+BEGIN_SRC emacs-lisp

(evil/n "åns" yas-new-snippet) ; Luo uusi snippetti, joka on asiaankuuluvassa moodissa

#+END_SRC 

*** Help ja terminaali
Käytä näitä komentoja kun tarvtiset apua jossain tilanteessa.

#+BEGIN_SRC emacs-lisp

(evil/n "åk" describe-key) ; Tutki äkkiä jonkun näppäinyhdistelmän merkitys 
(evil/n "åt" shell-command)

#+END_SRC 

*** Oikoluku / abbrev
Käytä näitä komentoja luodaksesi lennosta uusia abbrev-taulukon alkioita, 
jotka abbrev-mode oikolukee lennosta.

#+BEGIN_SRC emacs-lisp

(evil/n "åag" add-global-abbrev)
(evil/n "åam" add-mode-abbrev)
(evil/n "åaig" inverse-add-global-abbrev)
(evil/n "åaim" inverse-add-mode-abbrev)

#+END_SRC 
 
*** Magit
Magit-komennot tänne. Tässä ne yhdistetään åg-yhdistelmän alle tavalla tai
toisella.

#+BEGIN_SRC emacs-lisp

;; Helpota työtä makrolla

;;(defun evil/n (key func)
;;(define-key evil-normal-state-map (kbd key) func))

(evil/n "ågs" magit-status)

#+END_SRC 

*** Kirjanmerkit
Aseta kirjanmerkkejä liikkuaksesi helposti tiedostojen välillä.

#+BEGIN_SRC emacs-lisp

(evil/n "ånm" bookmark-set)
(evil/n "gm" bookmark-jump)
(evil/n "ålm" list-bookmarks)

#+END_SRC 

*** Kalenteri
Avaa kalenteri. Suluissa, koska pikanäppäin osoittaa nykyään laskimeen.

#+BEGIN_SRC emacs-lisp

;;(evil/n "åc" calendar)

#+END_SRC 

** Insert-mode
*** Erikoismerkit
Erikoismerkeiksi lasketaan kaikki merkit tyyliin @, $, \ jne. Tämä osio sisältää
näppäinyhdistelmät joilla ne voi tehdä käyttäjän ollessa Insert-modessa.

#+BEGIN_SRC emacs-lisp

  (defmacro evil/i (key body)
   `(define-key evil-insert-state-map (kbd ,key) (lambda() (interactive)(,@body))))


    (define-key evil-insert-state-map (kbd "åå") 'evil-force-normal-state) ; Poistu insert-modesta normal-modeen
  (evil/i "¨d" (insert "$"))
  (evil/i "¨." (insert "¨"))
  (evil/i "¨s" (insert "\\"))
  (evil/i "¨q" (insert "\""))
  (evil/i "¨c" (aaltosulkeet))

  (evil/i "å." (insert "å"))
  (evil/i "å2" (insert "@"))
  (evil/i "å4" (insert "$"))
  (evil/i "å7" (insert "\\"))
  (evil/i "å8" (insert "[]"))
  (evil/i "å9" (insert "{}"))
  (evil/i "åi" (insert "|"))

  (define-key evil-insert-state-map (kbd "C-d") 'kill-word)
  (define-key evil-insert-state-map (kbd "C-ö") 'evil-normal-state)
  (define-key evil-insert-state-map "ås" 'save-buffer)
  (define-key evil-insert-state-map "åc" 'shell-command)
  (define-key evil-insert-state-map (kbd "C-n") 'uusi-rivi)
  (define-key evil-insert-state-map (kbd "C-k") 'evil-delete-backward-char)
  (define-key evil-insert-state-map (kbd "C-b") 'hakasulkeet)

#+END_SRC 

** Visual-mode 
** Omat funktiot
Evil-moden omat komennot, jotka saadaan avattua :-komennolla. Käytä defun-sijaan evil-define-command-alkua.

#+BEGIN_SRC emacs-lisp


#+END_SRC 

* Org-mode
Org-modea varten tehtävät säädöt. Pyri tekemään niin, että asetukset alkavat t:llä.
** Bulletpoints
Tämän käyttäminen tekee listaamiseen tarkoitetuista bulletpointeista
kauniimman näköisiä.

#+BEGIN_SRC emacs-lisp
;; Aseta bulletspointsit
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; Uusi rivi ja uusi bulletpoint
(evil-define-key 'normal org-mode-map (kbd "C-n") 'org-insert-heading)
#+END_SRC
 
** Tagit
Aseta tagi helposti bulletpointiin

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "tt") 'org-set-tags-command)

#+END_SRC 

** Syntax highlighting
Ilman tätä org-tiedoston koodiblokeissa ei olisi koodin omaa
highlightausta.

#+BEGIN_SRC emacs-lisp

;;(setq org-src-fontify-natively t)

#+END_SRC 

** Babel-support / koodin ajaminen
Org-modessa on mahdollista kirjoittaa ajettavia koodinpätkiä. Aseta
tässä ne kielet, joiden evaluointi mahdollistetaan.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
    '((python . t)
      (R . t)
      (sqlite . t)))

#+END_SRC 


#+RESULTS
** Listojen ja taulukoiden manipulointi                    :laskentataulukko:
Meta + nuolinäppäimen avulla voi helposti liikuttaa taulukoiden
sarakkeita ja rivejä sekä bulletpointseja otsikon alla edes takas.
Käytä näitä jotta voit uudelleennimetä näppäimet Vim-tyylin mukaan.

#+BEGIN_SRC emacs-lisp

  (defmacro orgmap (key func)
   `(define-key org-mode-map (kbd ,key) (quote ,func)))

  (defmacro evil-org (key func)
  `(evil-define-key 'normal org-mode-map (kbd ,key) (quote ,func)))

  (define-key org-mode-map (kbd "M-h") 'org-metaleft)
  (orgmap "M-j" org-metadown)
  (orgmap "M-k" org-metaup)
  (orgmap "M-l" org-metaright)

  ;; Laske koko taulukko uudelleen
  (evil-org "tla" org-ctrl-c-star)

  ;; Sorttaa taulukko
  (evil-org "tls" org-sort)

#+END_SRC 

** Linkit
Käytä näitä linkkien hallitsemiseen ja avaamiseen

#+BEGIN_SRC emacs-lisp

  (evil-org "to" org-open-at-point)

#+END_SRC 

** Agenda
Agenda-moden hallitsemiseen tarkoitetut jutskat
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp
(evil/n "åq" org-agenda)
(evil/i "åq" (org-agenda))

#+END_SRC 
*** Agenda-tiedostot
Globaalissa todo-listassa org agenda kerää kaikki agenda-tiedostot määrätystä tiedostosta
tai kansiosta. Tässä koko org-kansio asetetaan sellaiseksi.

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files '("/Users/tommi/org"))

#+END_SRC 
*** Komennot
Laita tähän agenda moden sisällä tehtävät komennot

#+BEGIN_SRC emacs-lisp
  (defmacro agendamap (key func)
    `(define-key org-agenda-mode-map (kbd ,key) (quote ,func)))

  (agendamap "j" org-agenda-next-line)
  (agendamap "k" org-agenda-previous-line)
  (agendamap "n" org-agenda-next-item)
  (agendamap "p" org-agenda-previous-item)
  (agendamap "o" org-agenda-open-link)
  (agendamap "g" org-agenda-goto-date)

#+END_SRC 
*** Ikkunat ja bufferit
Laita tähän asetukset, joilla agenda modesta pääsee pois.
#+BEGIN_SRC emacs-lisp

  (agendamap tapa-aukioleva-buffer org-agenda-exit)

#+END_SRC 

** Beamer-mode                                                    :slideshow:
Beamer-modeen tulevat asetukset

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "te") 'org-export-dispatch)

#+END_SRC 
** Capture
Org-capture on työkalu, jonka avulla saat kirjoitettua nopeasti ad hoc -muistiinpanon
haluamaasi paikkaan.
*** Pikanäppäin
Aseta globaali pikanäppäin capturelle.

#+BEGIN_SRC emacs-lisp
  (evil/n "åw" org-capture)
  (evil/i "åw" org-capture)
#+END_SRC 

*** Lopeta capture-tila
Käytä tapa-buffer-komentoa luonnollisesti tähän.

*** Oletussijainti
Tallenna oletusarvoisesti kaikki org-capturet tähän tiedostoon.

#+BEGIN_SRC emacs-lisp

  (setq org-default-notes-file (concat org-directory "/Users/tommi/org/muistiinpanot.org"))

#+END_SRC 

*** Capture-template
Lisää tähän ne templatet, joita tulet käyttämään.

#+BEGIN_SRC emacs-lisp

  ;;(setq org-capture-templates
;;	'(("v" "Viittaukset" entry (file+headline "/Users/tommi/org/templates/vittaukset.org")
;;	   ))

#+END_SRC 

** Todo
Hallitse todo-listojen käyttöä hyvin. Oheisella painikkeella voit muuttaa helposti
todo:n done:ksi jne.
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (evil-define-key 'normal org-mode-map (kbd "td") 'org-todo)

#+END_SRC 
*** Tilat
Oletuksena todo-tilassa on vain todo ja done. Tässä voi lisätä omia.

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "PERUTTU(c)")))

#+END_SRC 
*** Avainsanojen värit
Määritä minkä värisiä tietyt avainsanat ovat

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords-faces
	'(("TODO" . org-warnings)
	  ("WAITING" . "yellow")
	  ("PERUTTU" . "blue")))

#+END_SRC 

** Aikataulutus ja timestamp
*** Aseta stamp
#+BEGIN_SRC emacs-lisp

  (evil-org "tat" org-time-stamp)
  (evil-org "tad" org-deadline)
  (evil-org "tas" org-schedule)
#+END_SRC 
*** Stampin formaatti
#+BEGIN_SRC emacs-lisp

  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '(" %a, %d.%m.%Y " . "<%a, %d.%m.%Y klo %H:%M>"))

#+END_SRC 

** Koodin kirjoitus
Src blockien hallintaan tarkoitetut työkalut tänne.

#+BEGIN_SRC emacs-lisp

  (defmacro srcmodemap (key func)
    `(define-key org-src-mode-map (kbd ,key) (quote ,func)))

  (evil-define-key 'normal org-src-mode-map (kbd "ts") 'org-edit-src-exit)
  (evil-define-key 'normal org-mode-map (kbd "ts") 'org-edit-special)
#+END_SRC 

* Python
** Hookit
Aseta hookeja, jotka aktivoituvat samalla kun Python-tila aktivoituu.

#+BEGIN_SRC emacs-lisp

(require 'auto-virtualenv)
(add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
(add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)

#+END_SRC 

** Indentointi
Aseta lähtökohtaisesti toimimaan

#+BEGIN_SRC emacs-lisp

(setq py-smart-indentation t)

#+END_SRC 

** Elpy
Aseta Elpy toimimaan

#+BEGIN_SRC emacs-lisp

  (elpy-enable)
  (setq elpy-rpc-backend "/Applications/anaconda3/lib/python3.6/site-packages/")
  (setq elpy-rpc-python-command "/Users/tommi/.emacs.d/.python-environments/default/bin/python3.6")
  ;;(add-hook 'python-mode-hook 'jedi:ac-setup)
  (setq jedi:complete-on-dot t)

#+END_SRC 

** Terminaali ja tulkki
Tulkki on tällä hetkellä Jupyter-notebook, mutta tästä tulisi mahdollisesti päästä
eroon.

#+BEGIN_SRC emacs-lisp

(pyenv-mode)
(setq python-shell-interpreter "/Applications/anaconda3/bin/jupyter")
;;    python-shell-interpreter-args "console")
(setq-default py-which-bufname "IPython")

#+END_SRC 

* Elisp / Emacs-Lisp
** Evaluointi
Lisp-lauseiden ajaminen tulkin läpi.

#+BEGIN_SRC emacs-lisp

  ;; (defun lisp-evaluointi (arg)
  ;;   "Tallenna sijainti rivillä, liiku rivin loppuun ja evaluoi Elisp-koodi.
  ;;   Palaa lopuksi takaisin kursorin alkuperäiseen paikkaan."
  ;;   (interactive "P")
  ;;   (save-excursion 
  ;;     (move-end-of-line 1)
  ;;     (eval-last-sexp arg)))


  (evil/n "årl" lisp-evaluointi)
  (define-key evil-insert-state-map (kbd "årl") 'lisp-evaluointi)

#+END_SRC 

* Omat funktiot
** Uudellennimeä buffer ja tiedosto
Credit to Steve Yegge. Tälle pitäisi keksiä jokin näppäinyhdistelmä.

#+BEGIN_SRC emacs-lisp

(defun rename-file-and-buffer (new-name)
 "Renames both current buffer and file it's visiting to NEW-NAME." (interactive "sNew name: ")
 (let ((name (buffer-name))
	(filename (buffer-file-name)))
 (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
 (if (get-buffer new-name)
	 (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file filename new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil)))))) ;;
;

#+END_SRC 
** Työn alla
#+BEGIN_SRC emacs-lisp

;; Tässä funktiossa on jokin pielessä, minkä vuoksi sitä ei käytetä.
;;(defun move-buffer-file (dir)
;; "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
;; (let* ((name (buffer-name))
;;	 (filename (buffer-file-name))
;;	 (dir
;;	 (if (string-match dir "\\(?:/\\|\\\\)$")
;;	 (substring dir 0 -1) dir))
;;	 (newname (concat dir "/" name)))

; (defun evil-normaali ()
 ;   "Toimii kuten evil-normal-state, mutta järjestää asian niin, että kursori ei liiku vasemmalle siirryttäessä edestakaisin normal- ja insert-moden välillä."
 ;; (evil-normal-state)(evil-forward-char))


#+END_SRC 

* Popup
** Perusasetukset
En ole saanut tätä skulaamaan vielä ollenkaan. Ota projektiksi.

#+BEGIN_SRC emacs-lisp

(require 'popup)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(provide 'popup-complete)

#+END_SRC 

* Kalenteri
Kalenteriin tehtävät asetukset tänne.
** Yleiset asetukset

#+BEGIN_SRC emacs-lisp

  (evil-set-initial-state 'calendar-mode 'emacs) ; Poista Evil-mode kalenteriin siirryttäessä

  (defmacro calendarmap (key func)
  `(define-key calendar-mode-map (kbd ,key) (quote ,func)))

  (define-key calendar-mode-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer) 
  (calendarmap seuraava-buffer next-buffer)
  (calendarmap edellinen-buffer previous-buffer)

#+END_SRC 

** Päivän etsintä

#+BEGIN_SRC emacs-lisp

(calendarmap "l" calendar-forward-day)
(calendarmap "h" calendar-backward-day)
(calendarmap "j" calendar-forward-week)
(calendarmap "k" calendar-backward-week)

(calendarmap "L" calendar-forward-month)
(calendarmap "H" calendar-backward-month)
(calendarmap "J" calendar-forward-year)
(calendarmap "K" calendar-backward-year)

#+END_SRC 

** Suomenkieliset nimet
Aseta eurooppalainen tyyli, suomalaiset päivä- ja kuukauden-
nimet jne.

#+BEGIN_SRC emacs-lisp

  (add-hook 'calendar-load-hook
        (lambda ()
           (calendar-set-date-style 'european)))

  (setq calendar-week-start-day 1
	calendar-day-name-array ["su" "ma" "ti" "ke" 
				 "to" "pe" "la"])
  (setq calendar-month-name-array ["Tammikuu" "Helmikuu" "Maaliskuu" "Huhtikuu"
				   "Toukokuu" "Kesäkuu" "Heinäkuu" "Elokuu"
				   "Syyskuu" "Lokakuu" "Marraskuu" "Joulukuu"])



#+END_SRC 

* Help- ja Info-mode
Käytä näitä kun olet info-tilassa (esim. luet Elisp-manuaalia)
tai olet help-tilassa (haet apua jonkun funktion määrittelyyn esim).
** Ikkunoiden hallinta
Liiku ikkunoiden välillä ja sulje niitä. Pyri pitämään nämä samoina kuin Evil-moden
ikkunoiden hallintatyökalut.

#+BEGIN_SRC emacs-lisp

  (defmacro helpmap (key func)
      `(define-key help-mode-map (kbd ,key) (quote ,func)))

  (defmacro infomap (key func)
      `(define-key Info-mode-map (kbd ,key) (quote ,func)))

  (infomap pilko-ikkuna-horisontaalisesti split-window-horizontally)
  (infomap pilko-ikkuna-vertikaalisesti split-window-vertically)
  (helpmap pilko-ikkuna-horisontaalisesti split-window-horizontally)
  (helpmap pilko-ikkuna-vertikaalisesti split-window-vertically)

  ;; (define-key Info-mode-map (kbd "C-ä") 'evil-window-next)
  (infomap poista-aktiivinen-ikkuna delete-window)
  (infomap poista-muut-ikkunat delete-other-windows)
  ;; (define-key Help-mode-map (kbd "C-ä") 'evil-window-next)
  (helpmap poista-aktiivinen-ikkuna delete-window)
  (helpmap poista-muut-ikkunat delete-other-windows)
  (helpmap "öö" ace-window)
  (infomap "öö" ace-window)
  ;; evil-window-kommentoitu, koska sen toiminta ei ole taattua tiloissa, joissa
  ;; Evil-modea ei ole.
#+END_SRC 

** Bufferien hallinta
Hallitse buffereita kuten tekisit normaalien tekstitiedostojen tapauksessa. Pyri
pitämään nämä synkronoituna tavallisten Evil-moden buffereiden hallintatyökalujen kanssa.
Näppäinyhdistelmissä käytettävät muuttujat löytyvät osiosta Globaalit muuttujat > Bufferit.

#+BEGIN_SRC emacs-lisp

(infomap buffer-valikko buffer-menu)
(infomap tapa-aukioleva-buffer kill-this-buffer)
(helpmap buffer-valikko buffer-menu)
(helpmap tapa-aukioleva-buffer kill-this-buffer)
(infomap seuraava-buffer switch-to-next-buffer)
(infomap edellinen-buffer switch-to-prev-buffer)
(helpmap seuraava-buffer switch-to-next-buffer)
(helpmap edellinen-buffer switch-to-prev-buffer)

#+END_SRC 
* Minibuffer
** Näppäinlyhenteet

#+BEGIN_SRC emacs-lisp

  (defmacro minibufmap (key func)
    `(define-key minibuffer-local-map (kbd ,key) ,func))

  (minibufmap "¨d" (lambda () (interactive)(insert "$")))
  (minibufmap "¨." (lambda () (interactive)(insert "¨")))
  (minibufmap "¨s" (lambda () (interactive)(insert "\\")))
  (minibufmap "¨q" (lambda () (interactive)(insert "\"")))



#+END_SRC
* Ivy 
Ivylle tarkoitetut asetukset tähän.
#+BEGIN_SRC emacs-lisp

(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)

#+END_SRC 

* Search / haku 
Hakumoodiin tarkoitetut asetukset. Tässä tavalliset Macin näppäinyhdistelmät käytössä, koska haku-toiminnot eivät hyväksy
prefix-näppäimiksi muita kuin Ctrl, Alt jne.
** Näppäinoikotiet

#+BEGIN_SRC emacs-lisp

  (defmacro hakumap (key func)
      `(define-key isearch-mode-map (kbd ,key) ,func))

  (defmacro keytrans (key1 key2)
      `(define-key key-translation-map (kbd ,key1) (kbd ,key2)))

  (hakumap "C-¨ d" (lambda () (interactive)(insert "$")))
  (hakumap "C-¨ ." (lambda () (interactive)(insert "¨")))
  (hakumap "C-¨ s" (lambda () (interactive)(insert "\\")))
  (hakumap "C-¨ q" (lambda () (interactive)(insert "\"")))
  (keytrans "M-(" "{")
  (keytrans "M-)" "}")
  (keytrans "M-8" "[")
  (keytrans "M-9" "]")
  (keytrans "M-2" "@")
  (keytrans "M-4" "$")
  (keytrans "M-7" "|")
  (keytrans "M-/" "\\")
#+END_SRC 

* Package-menu
Package Menu moodin asetukset

** Bufferit, ikkunat ja liikkuminen
#+BEGIN_SRC emacs-lisp

  (defmacro packmap (key func)
    `(define-key package-menu-mode-map (kbd ,key) (quote ,func)))

  (packmap "j" next-line)
  (packmap "k" previous-line)
  (packmap seuraava-buffer next-buffer)
  (packmap edellinen-buffer previous-buffer)
  (packmap buffer-valikko buffer-menu)
  (packmap tapa-aukioleva-buffer kill-this-buffer)
  (packmap "h" backward-char)
  (packmap "l" forward-char)
  (packmap poista-muut-ikkunat delete-other-windows)
  (packmap poista-aktiivinen-ikkuna delete-window)

  (add-hook 'package-menu-mode-hook (lambda () (evil-mode)))

#+END_SRC 

** Pakettien lataus

#+BEGIN_SRC emacs-lisp

  (packmap "i" package-install)

#+END_SRC 

* Git / Magit
Magit-pikanäppäimet löytyvät Evil-mode-valikon alta.
* Elfeed
Newsfeed Emacsin sisällä. Tee tänne asetukset sen varalta. Itse newsfeedit tulevat tiedostoon [[file:/Users/tommi/.emacs.d/elfeed.org][elfeed.org]].
** Elfeed-org
Aseta org-tiedosto, jossa voi hallita kaikkia seurattavia feedejä helposti.

#+BEGIN_SRC emacs-lisp

(require 'elfeed-org)

(elfeed-org)

(setq rmh-elfeed-org-files (list "/Users/tommi/.emacs.d/elfeed.org"))

#+END_SRC 

** Seurattavat sivut

#+BEGIN_SRC emacs-lisp

(setq elfeed-feeds
  '("http://noahpinionblog.blogspot.com/feeds/posts/default/"
    "http://johnhcochrane.blogspot.com/feeds/posts/default/"
    "http://newmonetarism.blogspot.com/feeds/posts/default/"
   ))

#+END_SRC 

* which-key
Näytä popup-valikossa saatavilla olevat näppäinyhdistelmät.
** Aseta päälle
#+BEGIN_SRC emacs-lisp

  (require 'which-key)
  (which-key-mode 1)
#+END_SRC 
** Kustomoi ohjeistusta
Sen sijaan, että which-key näyttää popup-valikossa funktioiden nimet, se voi näyttää 
ohjeeen siitä, mitä painike tekee.

#+BEGIN_SRC emacs-lisp

  (defalias 'whichmajor 'which-key-add-major-mode-key-based-replacements)

  (whichmajor 'org-mode
    "ta" "Ajanhallinta"
    "tad" "Aseta deadline"
    "tas" "Aseta aikataulutus"
    "tat" "Aseta yleinen timestamp"
    "te" "Vie toiseen muotoon"
    "tl" "Laskentataulukko"
    "tla" "Refreshaa taulukko"
    "tls" "Sorttaa taulukko"
    "to" "Avaa linkki"
    "ts" "Muokkaa koodia"
    )

#+END_SRC 

* Elmacro
Elmacro on työkalu, joka näyttää näppäinmakrot Elisp-funktioina

#+BEGIN_SRC emacs-lisp

(require 'elmacro)
(elmacro-mode)

#+END_SRC 

* Eshell
Eshellille tarkoitetut asetukset tulevat tänne
** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-ä") 'eshell)

#+END_SRC 
** Komentohistorian selaaminen
Tämä ei ota onnistukaseen vielä. Käytä M-up, M-down -komentoja.
#+BEGIN_SRC emacs-lisp

;(evil-define-key 'motion eshell-mode-map (kbd "C-ä") 'evil-jump-backwards)

#+END_SRC 
** Rivin manipulointi

#+BEGIN_SRC emacs-lisp

  (evil/i "¨d" (insert "$"))
  (evil/i "¨." (insert "¨"))
  (evil/i "¨a" (insert "@"))
  (evil/i "¨f" (insert "\\"))
  (evil/i "¨c" (insert "{}"))
  (evil/i "¨q" (insert "\"\""))

#+END_SRC 

* Laskin / calc
Emacsin oman laskimen asetukset.
** Pikanäppäin

#+BEGIN_SRC emacs-lisp

  (setq laskin-painike "åc")

  (evil/n laskin-painike calc)
  (evil/i laskin-painike (calc))

#+END_SRC 

* Internet 
** w3m
Selainasetukset tähän. Tämä ei toimi kunnolla, koska w3m ei asentunut oikein.

#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Pyydä www-selainta näyttämään URL." t)

#+END_SRC 

* Leikkikenttä
Laita tänne kaikkea höpsöttelyä.

#+BEGIN_SRC emacs-lisp
(message "Heihou")
#+END_SRC 

<2018-06-20 Ke>
<2018-06-21 To>
