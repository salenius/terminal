#+STARTUP: overview
# Emacs-konfiguraatio tiedosto
# Author: Tommi Salenius
# Created: La 9.6.2018
# License: GPL (2018)
# ---
Tämän tiedoston tarkoituksena on auttaa pitämään Emacs-kustomoinnit
hyvin organisoituna. Ideana on, että ohjelman käynnistyessä ajettava
[[file:/Users/tommi/.emacs.d/init.el][init.el-tiedosto]] ajaa läpi komennon, joka parsii tässä tiedostossa olevat
Elisp-komennot ja ajaa ne sitten Lisp-tulkin läpi asiaankuuluvin seurauksin.

* Yleiset asetukset  
** Kieli
Aseta kieli siten, että oletuksenomaisesti UTF-8-merkintätapa pätee.

#+BEGIN_SRC emacs-lisp

(set-language-environment "UTF-8") (set-default-coding-systems 'utf-8)

#+END_SRC 
** Työkalurivi ja valikkorivi
Piilota työkalurivi oletusarvoisesti. Valikkoriviä ei tarvitse piilottaa, koska
Macissa se on sijoitettuna automaattisesti ikkunan yläpuolella sijaitsevaan
palkkiin jota ei voi poistaa.

#+BEGIN_SRC emacs-lisp

(tool-bar-mode -1)

#+END_SRC 
** Aloitusbuffer
Aseta oletusarvoisesti niin, että Emacsin default-aloitusbufferi
ei pomppaa kuvaan kun ohjelma avataan. Sen sijaan scratch-bufferi toimii
avausikkunana.

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-screen t)

#+END_SRC 
** Meta + X -substituutti (Smex)
Alt + x -yhdistelmä on ergonomisesti aivan karsea. Tee näppäinyhdistelmä, jossa
voidaan saada helpommin menu / valikko / funktiovalikko käyttöön. Olen alkanut
käyttämään tässä pakettia smex, jonka avulla saadaan ido-tyyppinen älykäs autocompletion
funktiovalikkoon. 

#+BEGIN_SRC emacs-lisp

  (define-key key-translation-map (kbd "åe") (kbd "M-x"))
  (define-key key-translation-map (kbd "åE") (kbd "M-X"))
  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC 

** Rivinumerot
Emacsissa ei ole oletuksena rivinumeroita. Tämän avulla ne näkyvät.

#+BEGIN_SRC emacs-lisp

(global-linum-mode t)

#+END_SRC 

** Varmuuskopiot / backupit
Oletusarvoisesti kaikki backup-tiedostot menevät samaan kansioon kuin alkuperäis-
tiedostotkin. Luo kaikille tiedostoille yhtenäinen backup-kansio tilanteen helpottamiseksi.

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '(("." . "/Users/tommi/.emacs.d/backup")))

#+END_SRC 

** Merkkiääni
Hiljennä editoreissa tyypillisesti oleva merkkiääni, joka soi esim. kun kursori
on jo rivin alussa/lopussa ja yrittää siirtyä siitä eteenpäin.

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function 'ignore)

#+END_SRC 

** Näytä kellonaika
Tämän ansiosta kellonaika ja pvm näkyvät helposti. Katso vielä formatointi
uusiksi kunnolla (24-h ajanotto jne).

#+BEGIN_SRC emacs-lisp

(display-time-mode 1)


#+END_SRC 

** Terminaali / shell
Aseta oletusarvoisesti zsh terminaaliksi, joka avataan kun käsky annetaan.

#+BEGIN_SRC emacs-lisp

(setq explicit-shell-file-name "/bin/zsh")

#+END_SRC 

** Teema
Valitse teematiedosto, jota haluat käyttää. 

#+BEGIN_SRC emacs-lisp

(load-theme 'misterioso)

#+END_SRC 
** Kursori
Aseta kursorin väri fiksummaksi kuin oletusarvo. Voit vaihtaa värin
laittamalla heksadesimaalisen värikoodin muodossa _hxväri_, jossa väri
voi olla mikä tahansa kuten punainen, limenvihreä jne; abbrev-mode
korjaa tämän jälkeen värin heksadesimaalinumeroksi

#+BEGIN_SRC emacs-lisp

(set-cursor-color "#c8a2c8")

#+END_SRC 

* Globaalit muuttujat
Tässä olevien muuttujien on tarkoitus kuvata näppäinyhdistelmiä, jotka toimivat kaikissa mahdollisissa
tiloissa - tavallisten tekstitiedostojen lisäksi komentojen tulisi toimia Info, Help, Completions, Package Menu yms
moodeissa, joihin käyttäjällä ei ole tavallisia kirjoitusoikeuksia, ja siten Evil-moden kautta tapahtuvat yhdistelmät ovat
riittämättömiä. _Pidä tämä osio aina mahdollisimman ylhäällä!_
** Bufferit

#+BEGIN_SRC emacs-lisp

(setq buffer-valikko "öb")
(setq tapa-aukioleva-buffer "öä")
(setq seuraava-buffer "C-j")
(setq edellinen-buffer "C-k")

#+END_SRC 

** Ikkunat
#+BEGIN_SRC emacs-lisp

(setq pilko-ikkuna-horisontaalisesti "öwh")
(setq pilko-ikkuna-vertikaalisesti "öwv")
(setq poista-aktiivinen-ikkuna "ökt")
(setq poista-muut-ikkunat "öka")

#+END_SRC 

* Evil-mode
** Mahdollista paketit
Evil-mode mahdollistaa Vim-tyyppisten näppäinyhdistelmien käytön.

#+BEGIN_SRC emacs-lisp

(require 'evil)
(evil-mode 1)

#+END_SRC

** Normal-mode
*** Tiedoston sisällä liikkuminen
Seuraavat näppäinoikotiet on tarkoitettu helpottamaan liikkumista saman
bufferin ja ikkunan sisällä.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "åf" 'search-forward)
(define-key evil-normal-state-map "§" 'end-of-line) ; Mene rivin loppuun
(define-key evil-normal-state-map "zj" 'evil-scroll-down)
(define-key evil-normal-state-map "zk" 'evil-scroll-up)


#+END_SRC 

*** Ikkunat
Hallitse ikkunoita ja liiku niiden välillä

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "öö" 'ace-window) ; Mahdollista liikkuminen ikkunoiden välillä
(define-key evil-normal-state-map (kbd pilko-ikkuna-horisontaalisesti) 'split-window-horizontally)
(define-key evil-normal-state-map (kbd pilko-ikkuna-vertikaalisesti) 'split-window-vertically)
(define-key evil-normal-state-map (kbd "C-ä") 'evil-window-next)
(define-key evil-normal-state-map (kbd poista-aktiivinen-ikkuna) 'delete-window)
(define-key evil-normal-state-map (kbd poista-muut-ikkunat) 'delete-other-windows)

#+END_SRC 

*** Bufferit
Hallitse buffereita ja liiku niiden välillä

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "ås" 'save-buffer) ; Tallenna tiedosto
(define-key evil-normal-state-map (kbd buffer-valikko) 'buffer-menu)
(define-key evil-normal-state-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer)
(define-key evil-normal-state-map (kbd seuraava-buffer) 'evil-next-buffer)
(define-key evil-normal-state-map (kbd edellinen-buffer) 'evil-prev-buffer)

#+END_SRC 
 
*** Makrot
Käytä tätä komentoa makron ajamiseen.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "ää" 'evil-execute-macro) ; Aja makro

#+END_SRC 

*** Tiedostojen hakeminen
Näillä komennoilla voidaan hakea tiedostoja joko yleisessä merkityksessä, tai
sitten jotain tiettyjä usein haettavia tiedostoja, jotka tarvitsevat itsessään
oman näppäinoikotien.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(define-key evil-normal-state-map "gf" 'find-file)
;;(define-key evil-normal-state-map "öi" (lambda () (interactive)(find-file "/Users/tommi/.emacs.d/emacs.org")))
;; Käytä mieluummin 'E -yhdistelmää päästäksesi tänne
#+END_SRC 

*** Tekstin muokkaus
Näillä komennoilla voi tehdä muokkauksia tekstiin ilman, että tarvitsee
siirtyä Insert-modeen

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map (kbd "C-ö") 'comment-line) ; Kommentoi tai unkommentoi rivi

#+END_SRC 

*** Yas-snippets
Luo uusia Yas-snippettejä, jotka ovat moodispesifejä

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "åns" 'yas-new-snippet) ; Luo uusi snippetti, joka on asiaankuuluvassa moodissa

#+END_SRC 

*** Help ja terminaali
Käytä näitä komentoja kun tarvtiset apua jossain tilanteessa.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "åk" 'describe-key) ; Tutki äkkiä jonkun näppäinyhdistelmän merkitys 
(define-key evil-normal-state-map "åt" 'shell-command)

#+END_SRC 

*** Oikoluku / abbrev
Käytä näitä komentoja luodaksesi lennosta uusia abbrev-taulukon alkioita, 
jotka abbrev-mode oikolukee lennosta.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "åag" 'add-global-abbrev)
(define-key evil-normal-state-map "åam" 'add-mode-abbrev)
(define-key evil-normal-state-map "åaig" 'inverse-add-global-abbrev)
(define-key evil-normal-state-map "åaim" 'inverse-add-mode-abbrev)

#+END_SRC 
 
*** Magit
Magit-komennot tänne. Tässä ne yhdistetään åg-yhdistelmän alle tavalla tai
toisella.

#+BEGIN_SRC emacs-lisp

;; Helpota työtä makrolla

;;(defun evil/n (key func)
;;(define-key evil-normal-state-map (kbd key) func))

(defmacro evil/n (key func)
`(define-key evil-normal-state-map (kbd ,key) (quote ,func)))

(evil/n "ågs" magit-status)


#+END_SRC 

*** Kirjanmerkit
Aseta kirjanmerkkejä liikkuaksesi helposti tiedostojen välillä.

#+BEGIN_SRC emacs-lisp

(evil/n "åm" bookmark-set)
(evil/n "gm" bookmark-jump)
(evil/n "ålm" list-bookmarks)

#+END_SRC 

*** Kalenteri
Avaa kalenteri

#+BEGIN_SRC emacs-lisp

(evil/n "åc" calendar)

#+END_SRC 

** Insert-mode
*** Erikoismerkit
Erikoismerkeiksi lasketaan kaikki merkit tyyliin @, $, \ jne. Tämä osio sisältää
näppäinyhdistelmät joilla ne voi tehdä käyttäjän ollessa Insert-modessa.

#+BEGIN_SRC emacs-lisp

  (defmacro evil/i (key body)
  `(define-key evil-insert-state-map (kbd ,key) (lambda() (interactive)(,@body))))

  (define-key evil-insert-state-map (kbd "åå") 'evil-force-normal-state) ; Poistu insert-modesta normal-modeen

  (evil/i "å." (insert "å"))
  (evil/i "å2" (insert "@"))
  (evil/i "å4" (insert "$"))
  (evil/i "å7" (insert "\\"))
  (evil/i "å8" (insert "[]"))
  (evil/i "å9" (insert "{}")) 
  (evil/i "åi" (insert "|"))

  ;;(define-key evil-insert-state-map "å." (lambda() (interactive)(insert "å"))) ; Lisää ruotsalainen o normaalisti
  ;;(define-key evil-insert-state-map "å2" (lambda() (interactive)(insert "@"))) ; Tee at-merkki / at-sign
  ;;(define-key evil-insert-state-map "å4" (lambda() (interactive)(insert "$")))
  ;;(define-key evil-insert-state-map "å7" (lambda() (interactive)(insert "\\"))) ; Tee yksi (1) vasemmalle kallistuva kauttaviiva
  ;;(define-key evil-insert-state-map "å8" (lambda() (interactive)(insert "[]")))
  ;;(define-key evil-insert-state-map "å9" (lambda() (interactive)(insert "{}")))
  (define-key evil-insert-state-map (kbd "C-ä") 'evil-window-next)
  (define-key evil-insert-state-map (kbd "C-d") 'kill-word)
  (define-key evil-insert-state-map (kbd "C-ö") 'evil-normal-state)
  ;;(define-key evil-insert-state-map (kbd "å<") (lambda() (interactive)(insert "|")))
  (define-key evil-insert-state-map "ås" 'save-buffer)
  (define-key evil-insert-state-map "åc" 'shell-command)
  (define-key evil-insert-state-map (kbd "C-n") 'uusi-rivi)
  (define-key evil-insert-state-map (kbd "C-k") 'evil-delete-backward-char)
  (define-key evil-insert-state-map (kbd "C-b") 'hakasulkeet)

#+END_SRC 

** Visual-mode

* Org-mode
Org-modea varten tehtävät säädöt. Pyri tekemään niin, että asetukset alkavat t:llä.
** Bulletpoints
Tämän käyttäminen tekee listaamiseen tarkoitetuista bulletpointeista
kauniimman näköisiä.

#+BEGIN_SRC emacs-lisp
;; Aseta bulletspointsit
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; Uusi rivi ja uusi bulletpoint
(evil-define-key 'normal org-mode-map (kbd "C-n") 'org-insert-heading)
#+END_SRC
 
** Tagit
Aseta tagi helposti bulletpointiin

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "tt") 'org-set-tags-command)

#+END_SRC 

** Syntax highlighting
Ilman tätä org-tiedoston koodiblokeissa ei olisi koodin omaa
highlightausta.

#+BEGIN_SRC emacs-lisp

;;(setq org-src-fontify-natively t)

#+END_SRC 

** Babel-support / koodin ajaminen
Org-modessa on mahdollista kirjoittaa ajettavia koodinpätkiä. Aseta
tässä ne kielet, joiden evaluointi mahdollistetaan.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
    '((python . t)
      (R . t)
      (sqlite . t)))

#+END_SRC 


#+RESULTS
** Listojen ja taulukoiden manipulointi                    :laskentataulukko:
Meta + nuolinäppäimen avulla voi helposti liikuttaa taulukoiden
sarakkeita ja rivejä sekä bulletpointseja otsikon alla edes takas.
Käytä näitä jotta voit uudelleennimetä näppäimet Vim-tyylin mukaan.

#+BEGIN_SRC emacs-lisp

  (defmacro orgmap (key func)
   `(define-key org-mode-map (kbd ,key) (quote ,func)))

  (defmacro evil-org (key func)
  `(evil-define-key 'normal org-mode-map (kbd ,key) (quote ,func)))

  (define-key org-mode-map (kbd "M-h") 'org-metaleft)
  (orgmap "M-j" org-metadown)
  (orgmap "M-k" org-metaup)
  (orgmap "M-l" org-metaright)

  ;; Laske koko taulukko uudelleen
  (evil-org "tla" org-ctrl-c-star)

  ;; Sorttaa taulukko
  (evil-org "tls" org-sort)

#+END_SRC 

** Linkit
Käytä näitä linkkien hallitsemiseen ja avaamiseen

#+BEGIN_SRC emacs-lisp

  (evil-org "to" org-open-at-point)

#+END_SRC 

** Agenda
Agenda-moden hallitsemiseen tarkoitetut jutskat
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp
(evil/n "åq" org-agenda)
(evil/i "åq" (org-agenda))

#+END_SRC 
*** Agenda-tiedostot
Globaalissa todo-listassa org agenda kerää kaikki agenda-tiedostot määrätystä tiedostosta
tai kansiosta. Tässä koko org-kansio asetetaan sellaiseksi.

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files '("/Users/tommi/org"))

#+END_SRC 
*** Komennot
Laita tähän agenda moden sisällä tehtävät komennot

#+BEGIN_SRC emacs-lisp
  (defmacro agendamap (key func)
    `(define-key org-agenda-mode-map (kbd ,key) (quote ,func)))

  (agendamap "j" org-agenda-next-line)
  (agendamap "k" org-agenda-previous-line)
  (agendamap "n" org-agenda-next-item)
  (agendamap "p" org-agenda-previous-item)
  (agendamap "o" org-agenda-open-link)
  (agendamap "g" org-agenda-goto-date)

#+END_SRC 
*** Ikkunat ja bufferit
Laita tähän asetukset, joilla agenda modesta pääsee pois.
#+BEGIN_SRC emacs-lisp

  (agendamap tapa-aukioleva-buffer org-agenda-exit)

#+END_SRC 

** Beamer-mode                                                    :slideshow:
Beamer-modeen tulevat asetukset

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "te") 'org-export-dispatch)

#+END_SRC 
** Capture
Org-capture on työkalu, jonka avulla saat kirjoitettua nopeasti ad hoc -muistiinpanon
haluamaasi paikkaan.
*** Pikanäppäin
Aseta globaali pikanäppäin capturelle.

#+BEGIN_SRC emacs-lisp
  (evil/n "åw" org-capture)
  (evil/i "åw" org-capture)
#+END_SRC 

*** Lopeta capture-tila
Käytä tapa-buffer-komentoa luonnollisesti tähän.

*** Oletussijainti
Tallenna oletusarvoisesti kaikki org-capturet tähän tiedostoon.

#+BEGIN_SRC emacs-lisp

  (setq org-default-notes-file (concat org-directory "/Users/tommi/org/muistiinpanot.org"))

#+END_SRC 

*** Capture-template
Lisää tähän ne templatet, joita tulet käyttämään.

#+BEGIN_SRC emacs-lisp

  ;;(setq org-capture-templates
;;	'(("v" "Viittaukset" entry (file+headline "/Users/tommi/org/templates/vittaukset.org")
;;	   ))

#+END_SRC 

** Todo
Hallitse todo-listojen käyttöä hyvin. Oheisella painikkeella voit muuttaa helposti
todo:n done:ksi jne.
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (evil-define-key 'normal org-mode-map (kbd "td") 'org-todo)

#+END_SRC 
*** Tilat
Oletuksena todo-tilassa on vain todo ja done. Tässä voi lisätä omia.

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "PERUTTU(c)")))

#+END_SRC 
*** Avainsanojen värit
Määritä minkä värisiä tietyt avainsanat ovat

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords-faces
	'(("TODO" . org-warnings)
	  ("WAITING" . "yellow")
	  ("PERUTTU" . "blue")))

#+END_SRC 

** Aikataulutus ja timestamp

#+BEGIN_SRC emacs-lisp

  (evil-org "tat" org-time-stamp)
  (evil-org "tad" org-deadline)
  (evil-org "tas" org-schedule)

#+END_SRC 

** Koodin kirjoitus
Src blockien hallintaan tarkoitetut työkalut tänne.

#+BEGIN_SRC emacs-lisp

  (defmacro srcmodemap (key func)
    `(define-key org-src-mode-map (kbd ,key) (quote ,func)))

  (evil-define-key 'normal org-src-mode-map (kbd "ts") 'org-edit-src-exit)
  (evil-define-key 'normal org-mode-map (kbd "ts") 'org-edit-special)
#+END_SRC 

* Python
** Hookit
Aseta hookeja, jotka aktivoituvat samalla kun Python-tila aktivoituu.

#+BEGIN_SRC emacs-lisp

(require 'auto-virtualenv)
(add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
(add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)

#+END_SRC 

** Indentointi
Aseta lähtökohtaisesti toimimaan

#+BEGIN_SRC emacs-lisp

(setq py-smart-indentation t)

#+END_SRC 

** Elpy
Aseta Elpy toimimaan

#+BEGIN_SRC emacs-lisp

  (elpy-enable)
  (setq elpy-rpc-backend "/Applications/anaconda3/lib/python3.6/site-packages/")
  (setq elpy-rpc-python-command "/Users/tommi/.emacs.d/.python-environments/default/bin/python3.6")
  ;;(add-hook 'python-mode-hook 'jedi:ac-setup)
  (setq jedi:complete-on-dot t)

#+END_SRC 

** Terminaali ja tulkki
Tulkki on tällä hetkellä Jupyter-notebook, mutta tästä tulisi mahdollisesti päästä
eroon.

#+BEGIN_SRC emacs-lisp

(pyenv-mode)
(setq python-shell-interpreter "/Applications/anaconda3/bin/jupyter")
;;    python-shell-interpreter-args "console")
(setq-default py-which-bufname "IPython")

#+END_SRC 

* Omat funktiot
** Uudellennimeä buffer ja tiedosto
Credit to Steve Yegge. Tälle pitäisi keksiä jokin näppäinyhdistelmä.

#+BEGIN_SRC emacs-lisp

(defun rename-file-and-buffer (new-name)
 "Renames both current buffer and file it's visiting to NEW-NAME." (interactive "sNew name: ")
 (let ((name (buffer-name))
	(filename (buffer-file-name)))
 (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
 (if (get-buffer new-name)
	 (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file filename new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil)))))) ;;
;

#+END_SRC 
** Työn alla
#+BEGIN_SRC emacs-lisp

;; Tässä funktiossa on jokin pielessä, minkä vuoksi sitä ei käytetä.
;;(defun move-buffer-file (dir)
;; "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
;; (let* ((name (buffer-name))
;;	 (filename (buffer-file-name))
;;	 (dir
;;	 (if (string-match dir "\\(?:/\\|\\\\)$")
;;	 (substring dir 0 -1) dir))
;;	 (newname (concat dir "/" name)))

; (defun evil-normaali ()
 ;   "Toimii kuten evil-normal-state, mutta järjestää asian niin, että kursori ei liiku vasemmalle siirryttäessä edestakaisin normal- ja insert-moden välillä."
 ;; (evil-normal-state)(evil-forward-char))


#+END_SRC 

* Popup
** Perusasetukset
En ole saanut tätä skulaamaan vielä ollenkaan. Ota projektiksi.

#+BEGIN_SRC emacs-lisp

(require 'popup)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(provide 'popup-complete)

#+END_SRC 

* Kalenteri
Kalenteriin tehtävät asetukset tänne.
** Yleiset asetukset

#+BEGIN_SRC emacs-lisp

  (evil-set-initial-state 'calendar-mode 'emacs) ; Poista Evil-mode kalenteriin siirryttäessä

  (defmacro calendarmap (key func)
  `(define-key calendar-mode-map (kbd ,key) (quote ,func)))

  (define-key calendar-mode-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer) 
  (calendarmap seuraava-buffer next-buffer)
  (calendarmap edellinen-buffer previous-buffer)

#+END_SRC 

** Päivän etsintä

#+BEGIN_SRC emacs-lisp

(calendarmap "l" calendar-forward-day)
(calendarmap "h" calendar-backward-day)
(calendarmap "j" calendar-forward-week)
(calendarmap "k" calendar-backward-week)

(calendarmap "L" calendar-forward-month)
(calendarmap "H" calendar-backward-month)
(calendarmap "J" calendar-forward-year)
(calendarmap "K" calendar-backward-year)

#+END_SRC 

** Suomenkieliset nimet
Aseta eurooppalainen tyyli, suomalaiset päivä- ja kuukauden-
nimet jne.

#+BEGIN_SRC emacs-lisp

  (add-hook 'calendar-load-hook
        (lambda ()
           (calendar-set-date-style 'european)))

  (setq calendar-week-start-day 1
	calendar-day-name-array ["su" "ma" "ti" "ke" 
				 "to" "pe" "la"])
  (setq calendar-month-name-array ["Tammikuu" "Helmikuu" "Maaliskuu" "Huhtikuu"
				   "Toukokuu" "Kesäkuu" "Heinäkuu" "Elokuu"
				   "Syyskuu" "Lokakuu" "Marraskuu" "Joulukuu"])



#+END_SRC 

* Help- ja Info-mode
Käytä näitä kun olet info-tilassa (esim. luet Elisp-manuaalia)
tai olet help-tilassa (haet apua jonkun funktion määrittelyyn esim).
** Ikkunoiden hallinta
Liiku ikkunoiden välillä ja sulje niitä. Pyri pitämään nämä samoina kuin Evil-moden
ikkunoiden hallintatyökalut.

#+BEGIN_SRC emacs-lisp

(define-key Info-mode-map (kbd pilko-ikkuna-horisontaalisesti) 'split-window-horizontally)
(define-key Info-mode-map (kbd pilko-ikkuna-vertikaalisesti) 'split-window-vertically)
(define-key help-mode-map (kbd pilko-ikkuna-horisontaalisesti) 'split-window-horizontally)
(define-key help-mode-map (kbd pilko-ikkuna-vertikaalisesti) 'split-window-vertically)

;; (define-key Info-mode-map (kbd "C-ä") 'evil-window-next)
(define-key Info-mode-map (kbd poista-aktiivinen-ikkuna) 'delete-window)
(define-key Info-mode-map (kbd poista-muut-ikkunat) 'delete-other-windows)
;; (define-key Help-mode-map (kbd "C-ä") 'evil-window-next)
(define-key help-mode-map (kbd poista-aktiivinen-ikkuna) 'delete-window)
(define-key help-mode-map (kbd poista-muut-ikkunat) 'delete-other-windows)

;; evil-window-kommentoitu, koska sen toiminta ei ole taattua tiloissa, joissa
;; Evil-modea ei ole.
#+END_SRC 

** Bufferien hallinta
Hallitse buffereita kuten tekisit normaalien tekstitiedostojen tapauksessa. Pyri
pitämään nämä synkronoituna tavallisten Evil-moden buffereiden hallintatyökalujen kanssa.
Näppäinyhdistelmissä käytettävät muuttujat löytyvät osiosta Globaalit muuttujat > Bufferit.

#+BEGIN_SRC emacs-lisp

(define-key Info-mode-map (kbd buffer-valikko) 'buffer-menu)
(define-key Info-mode-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer)
(define-key help-mode-map (kbd buffer-valikko) 'buffer-menu)
(define-key help-mode-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer)
(define-key Info-mode-map (kbd seuraava-buffer) 'switch-to-next-buffer)
(define-key Info-mode-map (kbd edellinen-buffer) 'switch-to-prev-buffer)
(define-key help-mode-map (kbd seuraava-buffer) 'switch-to-next-buffer)
(define-key help-mode-map (kbd edellinen-buffer) 'switch-to-prev-buffer)


#+END_SRC 
* Package-menu
Package Menu moodin asetukset

** Bufferit, ikkunat ja liikkuminen
#+BEGIN_SRC emacs-lisp

  (defmacro packmap (key func)
    `(define-key package-menu-mode-map (kbd ,key) (quote ,func)))

  (packmap "j" next-line)
  (packmap "k" previous-line)
  (packmap seuraava-buffer next-buffer)
  (packmap edellinen-buffer previous-buffer)
  (packmap buffer-valikko buffer-menu)
  (packmap tapa-aukioleva-buffer kill-this-buffer)
  (packmap "h" backward-char)
  (packmap "l" forward-char)
  (packmap poista-muut-ikkunat delete-other-windows)
  (packmap poista-aktiivinen-ikkuna delete-window)

  (add-hook 'package-menu-mode-hook (lambda () (evil-mode)))

#+END_SRC 

** Pakettien lataus

#+BEGIN_SRC emacs-lisp

  (packmap "i" package-install)

#+END_SRC 

* Git / Magit
Magit-pikanäppäimet löytyvät Evil-mode-valikon alta.
* Elfeed
Newsfeed Emacsin sisällä. Tee tänne asetukset sen varalta. Itse newsfeedit tulevat tiedostoon [[file:/Users/tommi/.emacs.d/elfeed.org][elfeed.org]].
** Elfeed-org
Aseta org-tiedosto, jossa voi hallita kaikkia seurattavia feedejä helposti.

#+BEGIN_SRC emacs-lisp

(require 'elfeed-org)

(elfeed-org)

(setq rmh-elfeed-org-files (list "/Users/tommi/.emacs.d/elfeed.org"))

#+END_SRC 

** Seurattavat sivut

#+BEGIN_SRC emacs-lisp

(setq elfeed-feeds
  '("http://noahpinionblog.blogspot.com/feeds/posts/default/"
    "http://johnhcochrane.blogspot.com/feeds/posts/default/"
    "http://newmonetarism.blogspot.com/feeds/posts/default/"
   ))

#+END_SRC 

* Elmacro
Elmacro on työkalu, joka näyttää näppäinmakrot Elisp-funktioina

#+BEGIN_SRC emacs-lisp

(require 'elmacro)
(elmacro-mode)

#+END_SRC 

* Internet 
** w3m
Selainasetukset tähän. Tämä ei toimi kunnolla, koska w3m ei asentunut oikein.

#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Pyydä www-selainta näyttämään URL." t)

#+END_SRC 

* Leikkikenttä
Laita tänne kaikkea höpsöttelyä.

#+BEGIN_SRC emacs-lisp
(message "Heihou")
#+END_SRC 

