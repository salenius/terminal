#+STARTUP: overview
# Emacs-konfiguraatio tiedosto
# Author: Tommi Salenius
# Created: La 9.6.2018
# License: GPL (2018)
# ---
Tämän tiedoston tarkoituksena on auttaa pitämään Emacs-kustomoinnit
hyvin organisoituna. Ideana on, että ohjelman käynnistyessä ajettava
[[file:/Users/tommi/.emacs.d/init.el][init.el-tiedosto]] ajaa läpi komennon, joka parsii tässä tiedostossa olevat
Elisp-komennot ja ajaa ne sitten Lisp-tulkin läpi asiaankuuluvin seurauksin.

* Yleiset asetukset  
** Kieli
Aseta kieli siten, että oletuksenomaisesti UTF-8-merkintätapa pätee.

#+BEGIN_SRC emacs-lisp

  (set-language-environment "UTF-8") (set-default-coding-systems 'utf-8)
  (set-locale-environment "fi_FI.UTF-8")

  (setq initial-scratch-message "Toimii")
#+END_SRC 

#+RESULTS:
: Toimii

** Käyttäjätiedot
#+name: user-info
| Muuttuja         | Arvo                      |
|------------------+---------------------------|
| sähköpostiosoite | "tommisalenius@gmail.com" |
#+BEGIN_SRC emacs-lisp :exports code :var user-info=user-info :results list
(setq sähköpostiosoite "tommisalenius@gmail.com")
#+end_SRC

#+RESULTS:
: - tommisalenius@gmail.com

** Työkalurivi ja valikkorivi
Piilota työkalurivi oletusarvoisesti. Valikkoriviä ei tarvitse piilottaa, koska
Macissa se on sijoitettuna automaattisesti ikkunan yläpuolella sijaitsevaan
palkkiin jota ei voi poistaa.
#+BEGIN_SRC emacs-lisp

(tool-bar-mode -1)

#+END_SRC 
** Aloitusbuffer
Aseta oletusarvoisesti niin, että Emacsin default-aloitusbufferi
ei pomppaa kuvaan kun ohjelma avataan. Sen sijaan scratch-bufferi toimii
avausikkunana.

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-screen t)

#+END_SRC 
** Rivin highlightaus
Kytkin tämän pois päältä, koska se usein häiritsee enemmän kuin auttaa
(esim. smartparens-moden kanssa turhahko).
#+BEGIN_SRC emacs-lisp

  (global-hl-line-mode nil)

#+END_SRC 

** Meta + X -substituutti (Helm/Smex)
Alt + x -yhdistelmä on ergonomisesti aivan karsea. Tee näppäinyhdistelmä, jossa
voidaan saada helpommin menu / valikko / funktiovalikko käyttöön. 
Käytän tässä counsel-nimistä autocomplete-työkalua. 

#+BEGIN_SRC emacs-lisp

  (define-key key-translation-map (kbd "åe") (kbd "M-x"))
  (define-key key-translation-map (kbd "åE") (kbd "M-X"))
  ;; (require 'smex)
  ;; (smex-initialize)
  ;; ;; (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; (require 'helm)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  (require 'counsel)
  (global-set-key (kbd "M-x") 'counsel-M-x)
#+END_SRC 

** Rivinumerot
Emacsissa ei ole oletuksena rivinumeroita. Tämän avulla ne näkyvät.

#+BEGIN_SRC emacs-lisp

(global-linum-mode t)

#+END_SRC 

** Varmuuskopiot / backupit
Oletusarvoisesti kaikki backup-tiedostot menevät samaan kansioon kuin alkuperäis-
tiedostotkin. Luo kaikille tiedostoille yhtenäinen backup-kansio tilanteen helpottamiseksi.

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '(("." . "/Users/tommi/.emacs.d/backup")))

#+END_SRC 

** Merkkiääni
Hiljennä editoreissa tyypillisesti oleva merkkiääni, joka soi esim. kun kursori
on jo rivin alussa/lopussa ja yrittää siirtyä siitä eteenpäin.

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function 'ignore)

#+END_SRC 

** Näytä kellonaika
Tämän ansiosta kellonaika ja pvm näkyvät helposti. Katso vielä formatointi
uusiksi kunnolla (24-h ajanotto jne).

#+BEGIN_SRC emacs-lisp

(display-time-mode 1)
(setq display-time-24hr-format t)

#+END_SRC 

** Kyllä ja ei -kysymykset
Aseta niin, että voit vastata yes or no -tyylisiin kyssäreihiin vain y tai n. Helpottaa elämää.

#+BEGIN_SRC emacs-lisp

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC 

** Terminaali / shell
Aseta oletusarvoisesti zsh terminaaliksi, joka avataan kun käsky annetaan.

#+BEGIN_SRC emacs-lisp

(setq explicit-shell-file-name "/bin/zsh")

#+END_SRC 

** Teema
Valitse teematiedosto, jota haluat käyttää. 

#+BEGIN_SRC emacs-lisp

(load-theme 'misterioso)

#+END_SRC 
** Kursori
Aseta kursorin väri fiksummaksi kuin oletusarvo. Voit vaihtaa värin
laittamalla heksadesimaalisen värikoodin muodossa _hxväri_, jossa väri
voi olla mikä tahansa kuten punainen, limenvihreä jne; abbrev-mode
korjaa tämän jälkeen värin heksadesimaalinumeroksi

#+BEGIN_SRC emacs-lisp

(set-cursor-color "#c8a2c8")

#+END_SRC 

** Autocomplete
Pistä popup-valikko funktioille pystyyn.
#+BEGIN_SRC emacs-lisp

  (require 'company)
  (setq company-idle-delay 0)

  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'lisp-interactive-mode-hook 'company-mode)
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'ess-mode-hook 'company-mode)
#+END_SRC 

** Tallennus
#+BEGIN_SRC emacs-lisp

(setq-default require-final-newline nil)

#+END_SRC 

* Globaalit muuttujat
Tässä olevien muuttujien on tarkoitus kuvata näppäinyhdistelmiä, jotka toimivat kaikissa mahdollisissa
tiloissa - tavallisten tekstitiedostojen lisäksi komentojen tulisi toimia Info, Help, Completions, Package Menu yms
moodeissa, joihin käyttäjällä ei ole tavallisia kirjoitusoikeuksia, ja siten Evil-moden kautta tapahtuvat yhdistelmät ovat
riittämättömiä. _Pidä tämä osio aina mahdollisimman ylhäällä!_
** Julista muuttujat
#+BEGIN_SRC emacs-lisp

  (defvar buffer-valikko)
  (defvar tapa-aukioleva-buffer)
  (defvar seuraava-buffer)
  (defvar edellinen-buffer)
  (defvar pilko-ikkuna-horisontaalisesti)
  (defvar pilko-ikkuna-vertikaalisesti)
  (defvar poista-aktiivinen-ikkuna)
  (defvar poista-muut-ikkunat)

#+END_SRC 

** Bufferit

#+BEGIN_SRC emacs-lisp

(setq buffer-valikko "öb")
(setq tapa-aukioleva-buffer "öä")
(setq seuraava-buffer "ös")
(setq edellinen-buffer "öe")

#+END_SRC 

** Ikkunat
#+BEGIN_SRC emacs-lisp
  (setq vaihda-ikkunaa "öö")
  (setq pilko-ikkuna-horisontaalisesti "öwh")
  (setq pilko-ikkuna-vertikaalisesti "öwv")
  (setq poista-aktiivinen-ikkuna "ökt")
  (setq poista-muut-ikkunat "öka")

#+END_SRC 


** Tallennus
Asetukset, joilla voi tallentaa.
#+BEGIN_SRC emacs-lisp

(setq tallennus "ås")

#+END_SRC 

* Evil-mode
** Mahdollista paketit
Evil-mode mahdollistaa Vim-tyyppisten näppäinyhdistelmien käytön.

#+BEGIN_SRC emacs-lisp

(require 'evil)
(evil-mode 1)

#+END_SRC

** Makrot
#+BEGIN_SRC emacs-lisp

      ;; Metamakro
  (defmacro taulukko-eval (func table str)
       "Makro, jolla voit äkkiä kirjoittaa mikä taulukko TABLE kuvaa niitä
    näppäinyhdistelmiä, jotka tuottavat tietyn funktion FUNC. STR on t tai nil
    riippuen siitä onko taulukon 1. sarake tarkoitettu tulkittavaksi merkkijonona
    vai symbolina, eli laitetaanko sen ympärille sitaatit vai ei."
    `(mapc (lambda (x) (lue-merkki-pari x ,func ,str)) ,table))


    (defmacro kirjoita (merkki)
      `(lambda ()
	 (interactive)(insert ,merkki)))

    (defmacro def-avain (nimi moodi)
      "Yleistyökalu, jonka avulla käyttäjä voi luoda funktioita, jotka asettavat
    puolestaan pikanäppäinkomennon tietyn tilan funktioille. NIMI on funktion nimi,
    jonka makro palauttaa, MOODI on puolesta mode, jolle funktio voi luoda näppäinyhdistelmän."
      `(defun ,nimi (key func)
	 (define-key ,moodi (kbd key) func)))

    (def-avain evil/ins evil-insert-state-map)


      ;; (defmacro evil/n (key func)
      ;; `(define-key evil-normal-state-map (kbd ,key) (quote ,func)))

    (def-avain evil/n evil-normal-state-map)
    (def-avain evil/i evil-insert-state-map)
    (def-avain evil/m evil-motion-state-map)
    (def-avain evil/v evil-visual-state-map)

      ;; (defmacro evil/i (key body)
      ;; `(define-key evil-insert-state-map (kbd ,key) (lambda() (interactive)(,@body))))

      ;; (defmacro evil/m (key func)
      ;; `(define-key evil-motion-state-map (kbd ,key) (quote ,func)))
#+END_SRC 

** Normal-mode
*** Tiedoston sisällä liikkuminen
Seuraavat näppäinoikotiet on tarkoitettu helpottamaan liikkumista saman
bufferin ja ikkunan sisällä.

#+name: normaalimuodot
| Näppäinyhdistelmä | Funktio               |
|-------------------+-----------------------|
| §                 | 'end-of-line          |
| zj                | 'evil-scroll-down     |
| zk                | 'evil-scroll-up       |
| '                 | 'evil-search-forward  |
| +                 | 'evil-search-backward |

#+BEGIN_SRC emacs-lisp :exports code :var normaalimuodot=normaalimuodot
  (mapc (lambda (x) (lue-merkki-pari x 'evil/n t)) normaalimuodot)
#+END_SRC 

#+RESULTS:
| §  | 'end-of-line          |
| zj | 'evil-scroll-down     |
| zk | 'evil-scroll-up       |
| '  | 'evil-search-forward  |
| +  | 'evil-search-backward |

*** Ikkunat
Hallitse ikkunoita ja liiku niiden välillä

#+name: evil-ikkunat
| Aktiviteetti                   | Funktio                    |
|--------------------------------+----------------------------|
| vaihda-ikkunaa                 | 'ace-window                |
| pilko-ikkuna-horisontaalisesti | 'split-window-horizontally |
| pilko-ikkuna-vertikaalisesti   | 'split-window-vertically   |
| poista-aktiivinen-ikkuna       | 'delete-window             |
| poista-muut-ikkunat            | 'delete-other-windows      |
#+BEGIN_SRC emacs-lisp :exports code :var evil-ikkunat=evil-ikkunat
  (taulukko-eval 'evil/n evil-ikkunat nil)
  ;; (evil/n vaihda-ikkunaa 'ace-window) ; Mahdollista liikkuminen ikkunoiden välillä
  ;; (evil/n pilko-ikkuna-horisontaalisesti 'split-window-horizontally)
  ;; (evil/n pilko-ikkuna-vertikaalisesti 'split-window-vertically)
  ;; (evil/n poista-aktiivinen-ikkuna 'delete-window)
  ;; (evil/n poista-muut-ikkunat 'delete-other-windows)

#+END_SRC 

#+RESULTS:
| vaihda-ikkunaa                 | 'ace-window                |
| pilko-ikkuna-horisontaalisesti | 'split-window-horizontally |
| pilko-ikkuna-vertikaalisesti   | 'split-window-vertically   |
| poista-aktiivinen-ikkuna       | 'delete-window             |
| poista-muut-ikkunat            | 'delete-other-windows      |

*** Bufferit
Hallitse buffereita ja liiku niiden välillä

#+name: puskurit
| Näppäinyhdistelmä     | Funktio           |
|-----------------------+-------------------|
| tallennus             | 'save-buffer      |
| buffer-valikko        | 'ibuffer          |
| tapa-aukioleva-buffer | 'kill-this-buffer |
| seuraava-buffer       | 'evil-next-buffer |
| edellinen-buffer      | 'evil-prev-buffer |
#+BEGIN_SRC emacs-lisp :exports code :var puskurit=puskurit
  (taulukko-eval 'evil/n puskurit nil)
#+END_SRC 

#+RESULTS:
| tallennus             | 'save-buffer      |
| buffer-valikko        | 'ibuffer          |
| tapa-aukioleva-buffer | 'kill-this-buffer |
| seuraava-buffer       | 'evil-next-buffer |
| edellinen-buffer      | 'evil-prev-buffer |
 
*** Makrot
Käytä tätä komentoa makron ajamiseen.

#+BEGIN_SRC emacs-lisp

(define-key evil-normal-state-map "ää" 'evil-execute-macro) ; Aja makro

#+END_SRC 

*** Tiedostojen hakeminen
Näillä komennoilla voidaan hakea tiedostoja joko yleisessä merkityksessä, tai
sitten jotain tiettyjä usein haettavia tiedostoja, jotka tarvitsevat itsessään
oman näppäinoikotien.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-vertical-mode 1)
(define-key evil-normal-state-map "gf" 'ido-find-file)
;;(define-key evil-normal-state-map "öi" (lambda () (interactive)(find-file "/Users/tommi/.emacs.d/emacs.org")))
;; Käytä mieluummin 'E -yhdistelmää päästäksesi tänne
#+END_SRC 

*** Tekstin muokkaus
Näillä komennoilla voi tehdä muokkauksia tekstiin ilman, että tarvitsee
siirtyä Insert-modeen

#+BEGIN_SRC emacs-lisp

(evil/n "C-ö" 'comment-line) ; Kommentoi tai unkommentoi rivi

#+END_SRC 

*** Yas-snippets
Luo uusia Yas-snippettejä, jotka ovat moodispesifejä

#+BEGIN_SRC emacs-lisp

(evil/n "åns" 'yas-new-snippet) ; Luo uusi snippetti, joka on asiaankuuluvassa moodissa

#+END_SRC 

*** Help ja terminaali
Käytä näitä komentoja kun tarvtiset apua jossain tilanteessa.

#+BEGIN_SRC emacs-lisp

(evil/n "åk" 'describe-key) ; Tutki äkkiä jonkun näppäinyhdistelmän merkitys 
(evil/n "åt" 'shell-command)

#+END_SRC 

*** Oikoluku / abbrev
Käytä näitä komentoja luodaksesi lennosta uusia abbrev-taulukon alkioita, 
jotka abbrev-mode oikolukee lennosta.
#+name: abbrev-taulukko
| Näppäinyhdistelmä | Funktio                    |
|-------------------+----------------------------|
| åag               | 'add-global-abbrev         |
| åam               | 'add-mode-abbrev           |
| åaig              | 'inverse-add-global-abbrev |
| åaim              | 'inverse-add-mode-abbrev   |
#+BEGIN_SRC emacs-lisp :exports code :var abbrev-taulukko=abbrev-taulukko
(taulukko-eval 'evil/n abbrev-taulukko t)
#+end_SRC

#+RESULTS:
| åag  | 'add-global-abbrev         |
| åam  | 'add-mode-abbrev           |
| åaig | 'inverse-add-global-abbrev |
| åaim | 'inverse-add-more-abbrev   |


#+BEGIN_SRC emacs-lisp

  ;; (evil/n "åag" 'add-global-abbrev)
  ;; (evil/n "åam" 'add-mode-abbrev)
  ;; (evil/n "åaig" 'inverse-add-global-abbrev)
  ;; (evil/n "åaim" 'inverse-add-mode-abbrev)

#+END_SRC 
 
*** Magit
Magit-komennot tänne. Tässä ne yhdistetään åg-yhdistelmän alle tavalla tai
toisella.

#+BEGIN_SRC emacs-lisp

;; Helpota työtä makrolla

;;(defun evil/n (key func)
;;(define-key evil-normal-state-map (kbd key) func))

(evil/n "ågs" 'magit-status)

#+END_SRC 

*** Kirjanmerkit
Aseta kirjanmerkkejä liikkuaksesi helposti tiedostojen välillä.

#+name: kirjanmerkki-evil
| Näppäinyhdistelmä | Funktio         |
|-------------------+-----------------|
| ånm               | 'bookmark-set   |
| gm                | 'bookmark-jump  |
| ålm               | 'list-bookmarks |
#+BEGIN_SRC emacs-lisp :exports code :var kirjanmerkki-evil=kirjanmerkki-evil
(taulukko-eval 'evil/n kirjanmerkki-evil t)
#+end_SRC

#+RESULTS:
| ånm | 'bookmark-set  |
| gm  | 'bookmark-jump |

#+BEGIN_SRC emacs-lisp

  ;; (evil/n "ånm" 'bookmark-set)
  ;; (evil/n "gm" 'bookmark-jump)
  ;; (evil/n "ålm" 'list-bookmarks)

#+END_SRC 

*** Kalenteri
Avaa kalenteri. Suluissa, koska pikanäppäin osoittaa nykyään laskimeen.

#+BEGIN_SRC emacs-lisp

;;(evil/n "åc" calendar)

#+END_SRC 

*** Hookit
#+BEGIN_SRC emacs-lisp

  ;; (add-hook 'evil-normal-state-entry-hook (lambda () (global-hl-line-mode 1)))

#+END_SRC 

*** Help / apua
#+BEGIN_SRC emacs-lisp

(evil/n "åhk" 'counsel-descbinds)
(evil/n "åhf" 'counsel-describe-function)
(evil/n "åhv" 'counsel-describe-variable)

#+END_SRC 

** Insert-mode
*** Erikoismerkit
Erikoismerkeiksi lasketaan kaikki merkit tyyliin @, $, \ jne. Tämä osio sisältää
näppäinyhdistelmät joilla ne voi tehdä käyttäjän ollessa Insert-modessa.

#+BEGIN_SRC emacs-lisp

  (define-key evil-insert-state-map (kbd "åå") 'evil-force-normal-state) ; Poistu insert-modesta normal-modeen
  (evil/i "¨d" (kirjoita "$"))
  (evil/i "¨." (kirjoita "¨"))
  (evil/i "¨s" (kirjoita "\\"))
  (evil/i "¨q" (kirjoita "\""))

  (evil/i "å2" (kirjoita "@"))
  (evil/i "å4" (kirjoita "$"))
  (evil/i "å7" (kirjoita "\\"))
  (evil/i "åi" (kirjoita "|"))
  (evil/i "å." (kirjoita "å"))
  
  (evil/i "C-d" 'kill-word)
  (evil/i "C-ö" 'evil-normal-state)
  (evil/i "ås" 'save-buffer)
  (evil/i "åc" 'shell-command)
  ;; (define-key evil-insert-state-map (kbd "C-n") 'uusi-rivi)
  (evil/i "C-k" 'evil-delete-backward-char)
  (evil/i "C-b" 'hakasulkeet)

#+END_SRC 

*** Hookit

#+BEGIN_SRC emacs-lisp

  (add-hook 'evil-insert-state-entry-hook (lambda () (global-hl-line-mode -1)))

#+END_SRC 

** Visual-mode 
** Motion-mode
Motion-state on tila, jota käytetään erikoistiedostoissa, joissa ei voi
tehdä muutoksia, mutta halutaan silti käyttää Vim-näppäinyhdistelmiä
liikkumiseen.

#+BEGIN_SRC emacs-lisp
  (evil/m "SPC" 'counsel-find-file)

#+END_SRC 

** Omat funktiot
Evil-moden omat komennot, jotka saadaan avattua :-komennolla. Käytä defun-sijaan evil-define-command-alkua.

#+BEGIN_SRC emacs-lisp


#+END_SRC 

* Org-mode
Org-modea varten tehtävät säädöt. Pyri tekemään niin, että asetukset alkavat t:llä.
** Bulletpoints
Tämän käyttäminen tekee listaamiseen tarkoitetuista bulletpointeista
kauniimman näköisiä.

#+BEGIN_SRC emacs-lisp
;; Aseta bulletspointsit
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 
;; Uusi rivi ja uusi bulletpoint
(evil-define-key 'normal org-mode-map (kbd "C-n") 'org-insert-heading)
#+END_SRC
 
** Tagit
Aseta tagi helposti bulletpointiin

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "tt") 'org-set-tags-command)

#+END_SRC 

** Syntax highlighting
Ilman tätä org-tiedoston koodiblokeissa ei olisi koodin omaa
highlightausta.
Lisää tähän niin että LaTeX-komennot saavan highlightauksen.
Toistaiseksi ongelma, että font-lockien yritykset eivät toimi omaehtoisille
avainsanoille. Syy on toistaiseksi tuntematon.

#+BEGIN_SRC emacs-lisp

  ;;(setq org-src-fontify-natively t)
  (setq org-highlight-latex-and-related '(latex script entitites)) ;; Highlighttaa kaavat pelkästään

  ;; (add-hook 'org-mode-hook
	    ;; (lambda ()
	      ;; (font-lock-add-keywords nil
				      ;; '(("\\<\\(\\cite\\)" .
					 ;; font-lock-keyword-face)))))

  ;; (setq latex-avainsanat
    ;; '(("\\(\\\\cite\\)" . font-lock-keyword-face)))

  ;; (font-lock-add-keywords 'org-mode '(("\\<\\cite\\>" . font-lock-keyword-face)))
#+END_SRC 

** Babel-support / koodin ajaminen
Org-modessa on mahdollista kirjoittaa ajettavia koodinpätkiä. Aseta
tässä ne kielet, joiden evaluointi mahdollistetaan.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
    '((python . t)
      (R . t)
      (sqlite . t)
      (C . t)
      (java . t)
      (prolog . t)))

#+END_SRC 


#+RESULTS
** Listojen ja taulukoiden manipulointi                    :laskentataulukko:
Meta + nuolinäppäimen avulla voi helposti liikuttaa taulukoiden
sarakkeita ja rivejä sekä bulletpointseja otsikon alla edes takas.
Käytä näitä jotta voit uudelleennimetä näppäimet Vim-tyylin mukaan.

#+BEGIN_SRC emacs-lisp

  (defmacro orgmap (key func)
   `(define-key org-mode-map (kbd ,key) (quote ,func)))

  (defmacro evil-org (key func)
  `(evil-define-key 'normal org-mode-map (kbd ,key) (quote ,func)))

  (define-key org-mode-map (kbd "M-h") 'org-metaleft)
  (orgmap "M-j" org-metadown)
  (orgmap "M-k" org-metaup)
  (orgmap "M-l" org-metaright)

  ;; Laske koko taulukko uudelleen
  (evil-org "tla" org-ctrl-c-star)

  ;; Sorttaa taulukko
  (evil-org "tls" org-sort)

#+END_SRC 

** Linkit
Käytä näitä linkkien hallitsemiseen ja avaamiseen

#+BEGIN_SRC emacs-lisp

  (evil-org "to" org-open-at-point)
  (evil-org "tb" org-mark-ring-goto)

#+END_SRC 

** Agenda
Agenda-moden hallitsemiseen tarkoitetut jutskat
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp
(evil/n "åv" 'org-agenda)
(evil/i "åv" 'org-agenda)

#+END_SRC 
*** Agenda-tiedostot
Globaalissa todo-listassa org agenda kerää kaikki agenda-tiedostot määrätystä tiedostosta
tai kansiosta. Tässä koko org-kansio asetetaan sellaiseksi.

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files '("/Users/tommi/org"))

#+END_SRC 
*** Komennot
Laita tähän agenda moden sisällä tehtävät komennot

#+BEGIN_SRC emacs-lisp
  (defmacro agendamap (key func)
    `(define-key org-agenda-mode-map (kbd ,key) (quote ,func)))

  (agendamap "j" org-agenda-next-line)
  (agendamap "k" org-agenda-previous-line)
  (agendamap "n" org-agenda-next-item)
  (agendamap "p" org-agenda-previous-item)
  (agendamap "o" org-agenda-open-link)
  (agendamap "g" org-agenda-goto-date)

#+END_SRC 
*** Ikkunat ja bufferit
Laita tähän asetukset, joilla agenda modesta pääsee pois.
#+BEGIN_SRC emacs-lisp

  (agendamap tapa-aukioleva-buffer org-agenda-exit)

#+END_SRC 

** Latex
#+BEGIN_SRC emacs-lisp
  (require 'org-ref)
  (setq reftex-default-bibliography "/Users/tommi/org/Gradu/sources.bib")
  (setq org-ref-default-bibliography  "/Users/tommi/org/Gradu/sources.bib")
  (setq bibtex-completion-pdf-open-function
    (lambda (fpath)
      (start-process "open" "*open*" "open" fpath)))
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC 

** Beamer-mode                                                    :slideshow:
Beamer-modeen tulevat asetukset

#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal org-mode-map (kbd "te") 'org-export-dispatch)

#+END_SRC 
** Capture
Org-capture on työkalu, jonka avulla saat kirjoitettua nopeasti ad hoc -muistiinpanon
haluamaasi paikkaan.
*** Pikanäppäin
Aseta globaali pikanäppäin capturelle.

#+BEGIN_SRC emacs-lisp
  (evil/n "åw" 'org-capture)
  (evil/i "åw" 'org-capture)
#+END_SRC 

*** Lopeta capture-tila
Käytä tapa-buffer-komentoa luonnollisesti tähän.

*** Oletussijainti
Tallenna oletusarvoisesti kaikki org-capturet tähän tiedostoon.

#+BEGIN_SRC emacs-lisp

  (setq org-default-notes-file (concat org-directory "/Users/tommi/org/muistiinpanot.org"))

#+END_SRC 

*** Capture-template
Lisää tähän ne templatet, joita tulet käyttämään.

#+BEGIN_SRC emacs-lisp

    ;;(setq org-capture-templates
  ;;	'(("v" "Viittaukset" entry (file+headline "/Users/tommi/org/templates/vittaukset.org")
  ;;	   ))

  (setq org-capture-templates
	'(("d" "Duuniasia" entry (file+headline "/Users/tommi/org/todo.org" "BoF")
	   "* TODO %? \n %^t")
	  ("g" "Gradu" entry (file+headline "/Users/tommi/org/templates/viittaukset.org" "Makrotaloustiede")
	   "* TODO %^{Otsikko} \n %t \n %? \n - Tekijä(t): %^{Tekijät} \n - Julkaisu: %^{Julkaisu} \n - Vuosi: %^{Vuosi} \n - Numero: %^{Numero} \n - Sivu: %^{Sivu}")
	  ("t" "Tapahtuma" entry (file+headline "/Users/tommi/org/todo.org" "Tapahtumat")
	   "* %^{Nimi}\n*Aika:* %^t\n*Paikka:* %^{Paikka}\n*Järjestäjä:* %^{Järjestäjä|tuntematon}\n*Muuta:* %?")
	  ))
#+END_SRC 

** Todo
Hallitse todo-listojen käyttöä hyvin. Oheisella painikkeella voit muuttaa helposti
todo:n done:ksi jne.
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (evil-define-key 'normal org-mode-map (kbd "td") 'org-todo)

#+END_SRC 
*** Tilat
Oletuksena todo-tilassa on vain todo ja done. Tässä voi lisätä omia.

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "PERUTTU(c)")))

#+END_SRC 
*** Avainsanojen värit
Määritä minkä värisiä tietyt avainsanat ovat

#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords-faces
	'(("TODO" . org-warnings)
	  ("WAITING" . "yellow")
	  ("PERUTTU" . "blue")))

#+END_SRC 

** Ctrl-c Ctrl-c
Org-moden taikanappula joka pystyy tekemään useita asiota:
- Ajamaan koodisnipettejä
- Päivittämään taulukon kaavoja
- Luomaan linkkejä avainsanoihin perustuen
#+BEGIN_SRC emacs-lisp

  (orgmap "år" org-ctrl-c-ctrl-c)

#+END_SRC 

** Viitteet
Kun kirjoitat org-modella tekstiä, joka käännetään LaTeX-muotoon, käytä tätä
voidakseksi lisätä linkkejä mahdollisimman helposti.
#+BEGIN_SRC emacs-lisp

  (evil-org "tr" org-reftex-citation)
#+END_SRC 

** Aikataulutus ja timestamp
*** Aseta stamp
#+BEGIN_SRC emacs-lisp

  (evil-org "tat" org-time-stamp)
  (evil-org "tad" org-deadline)
  (evil-org "tas" org-schedule)
#+END_SRC 
*** Stampin formaatti
#+BEGIN_SRC emacs-lisp

  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '(" %a, %d.%m.%Y " . "<%a, %d.%m.%Y klo %H:%M>"))

#+END_SRC 

** Koodin kirjoitus
Src blockien hallintaan tarkoitetut työkalut tänne.

#+BEGIN_SRC emacs-lisp

  (defmacro srcmodemap (key func)
    `(define-key org-src-mode-map (kbd ,key) (quote ,func)))

  (evil-define-key 'normal org-src-mode-map (kbd "ts") 'org-edit-src-exit)
  (evil-define-key 'normal org-mode-map (kbd "ts") 'org-edit-special)

  (add-hook 'org-mode-hook (lambda () (interactive)(setq-local require-final-newline nil)))
#+END_SRC 

* Python
** Kieli
Aseta Python tukemaan Unicodea.

#+BEGIN_SRC emacs-lisp

(setenv "PYTHONIOENCODING" "utf-8")

#+END_SRC 

#+RESULTS:
: utf-8

** Hookit
Aseta hookeja, jotka aktivoituvat samalla kun Python-tila aktivoituu.

#+BEGIN_SRC emacs-lisp

(require 'auto-virtualenv)
(add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
(add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)

#+END_SRC 

** Indentointi
Aseta lähtökohtaisesti toimimaan

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t)
  (setq py-smart-indentation t)
  ;; (setq org-src-preserve-indentation t)
  ;; (setq org-src-tab-acts-natively t)
  (setq tab-width 4)
#+END_SRC 

** Elpy
Aseta Elpy toimimaan

#+BEGIN_SRC emacs-lisp

(elpy-enable)
(setq elpy-rpc-backend "jedi")
(setq elpy-rpc-python-command "/Users/tommi/.emacs.d/.python-environments/default/bin/python3.6")
(add-hook 'python-mode-hook 'jedi:ac-setup)
(setq jedi:complete-on-dot t)
(add-hook 'elpy-mode-hook
(lambda ()
(set (make-local-variable 'company-backends)
'((company-dabbrev-code company-yasnippet elpy-company-backend)))))
#+END_SRC 

** Terminaali ja tulkki
Tulkki on tällä hetkellä Jupyter-notebook, mutta tästä tulisi mahdollisesti päästä
eroon.

#+BEGIN_SRC emacs-lisp

(pyenv-mode)
(setq python-shell-interpreter "/Applications/anaconda3/bin/jupyter")
;;    python-shell-interpreter-args "console")
(setq-default py-which-bufname "IPython")

#+END_SRC 

** Shell-komennot
Tähän Python-shellin komennot
#+BEGIN_SRC emacs-lisp

  (add-hook 'py-python-shell-mode-hook (lambda () (interactive)
					 (evil/i "C-b" 'comint-previous-matching-input-from-input)
					 (evil/i "C-f" 'comint-next-matching-input-from-input)))

#+END_SRC 

** Virtuaaliympäristöt
*** Conda-ympäristöt
#+BEGIN_SRC emacs-lisp
  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell)

  (setenv "WORKON_HOME" "/Applications/anaconda3/envs")
  (pyvenv-mode 1)
  (pyvenv-tracking-mode 1)
  (setq venv-location "/Applications/anaconda3/envs")
#+END_SRC 

*** Pikanäppäimet
Funktiot tekevät seuraavia asioita:
 1) *venv-workon*: aktivoi haluttu virtuaaliympäristö
 2) *venv-deactivate*: deaktivoi virtuaaliympäristö
 3) *python*: avaa Python-shell perustuen virtuaaliympäristöön
#+name: python-kbd
| Pikanäppäin | Funktio          |
|-------------+------------------|
| åpa         | 'venv-workon     |
| åpd         | 'venv-deactivate |
| åps         | 'python          |

#+BEGIN_SRC emacs-lisp :exports code :var python-kbd=python-kbd
(taulukko-eval 'evil/n python-kbd t)
#+end_SRC

** Dokumentaatio
#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal 'python-mode-map (kbd "åd") 'elpy-doc)

#+END_SRC 

* Elisp / Emacs-Lisp
** Makrot
#+BEGIN_SRC emacs-lisp

  (defmacro elispmap (key func)
      `(define-key lisp-mode-shared-map (kbd ,key) (quote ,func)))

#+END_SRC 

** Evaluointi
Lisp-lauseiden ajaminen tulkin läpi.

#+BEGIN_SRC emacs-lisp

  ;; (defun lisp-evaluointi (arg)
  ;;   "Tallenna sijainti rivillä, liiku rivin loppuun ja evaluoi Elisp-koodi.
  ;;   Palaa lopuksi takaisin kursorin alkuperäiseen paikkaan."
  ;;   (interactive "P")
  ;;   (save-excursion 
  ;;     (move-end-of-line 1)
  ;;     (eval-last-sexp arg)))

  ;; Yleiseen käyttöön
  (evil/n "ål" 'lisp-evaluointi)
  (evil/i "ål" 'lisp-evaluointi)
  ;; Lisp-moden spesifiseen käyttöön
  (elispmap "år" lisp-evaluointi)
#+END_SRC 

** Dokumentointi / elisp-def
Etsi funktioiden dokumentointia.

#+BEGIN_SRC emacs-lisp
  (require 'elisp-def)
  (elisp-def-mode 1)

  (add-hook 'emacs-lisp-mode-hook
	    (lambda () (define-key lisp-mode-shared-map "åd" 'elisp-def)))


#+END_SRC 
** Sulkeiden tuotanto
#+BEGIN_SRC emacs-lisp

  ;; (elispmap "C-n" kaarisulkeet)
  ;; Ylläoleva turha uuden smartparensin takia
  (require 'smartparens)
  (add-hook 'emacs-lisp-mode-hook (lambda ()(interactive)
				   (smartparens-mode)))

#+END_SRC 

* Omat funktiot
** Uudellennimeä buffer ja tiedosto
Credit to Steve Yegge. Tälle pitäisi keksiä jokin näppäinyhdistelmä.

#+BEGIN_SRC emacs-lisp

(defun rename-file-and-buffer (new-name)
 "Renames both current buffer and file it's visiting to NEW-NAME." (interactive "sNew name: ")
 (let ((name (buffer-name))
	(filename (buffer-file-name)))
 (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
 (if (get-buffer new-name)
	 (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file filename new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil)))))) ;;
;

#+END_SRC 
** Työn alla
#+BEGIN_SRC emacs-lisp

;; Tässä funktiossa on jokin pielessä, minkä vuoksi sitä ei käytetä.
;;(defun move-buffer-file (dir)
;; "Moves both current buffer and file it's visiting to DIR." (interactive "DNew directory: ")
;; (let* ((name (buffer-name))
;;	 (filename (buffer-file-name))
;;	 (dir
;;	 (if (string-match dir "\\(?:/\\|\\\\)$")
;;	 (substring dir 0 -1) dir))
;;	 (newname (concat dir "/" name)))

; (defun evil-normaali ()
 ;   "Toimii kuten evil-normal-state, mutta järjestää asian niin, että kursori ei liiku vasemmalle siirryttäessä edestakaisin normal- ja insert-moden välillä."
 ;; (evil-normal-state)(evil-forward-char))


#+END_SRC 

** Evil-tilojen vaihto
Näiden funktioiden avulla voit helposti tehdä kirjoittamiskokemuksesta mukavaa.
Funktioista on tullut turhia koska lisäsin entry-hookit normal- ja insert-tiloille.
#+BEGIN_SRC emacs-lisp

  (defun kirjoita-rauhassa ()
    "Aloita kirjoittaminen kursoria edeltävältä paikalta (Vimin 'i' painike)
  ja poista rivin highlightaus."
    (interactive)
    (evil-insert 1)
    (global-hl-line-mode -1))

  (defun jatka-kirjoitusta-rauhassa ()
    "Aloita kirjoittaminen kursorin jälkeiseltä paikalta (Vimin 'a' painike)
  ja poista rivin highlighttaus."
    (interactive)
    (evil-append 1)
    (global-hl-line-mode -1))


  (defun poistu-ja-näytä-rivi ()
    "Highlightaa rivi kun poistut Insert-tilasta."
    (interactive)
    (evil-normal-state 1)
    (global-hl-line-mode 1))

  ;; Käytä hyväksi uusia funktioita

  ;; (evil/n "a" 'jatka-kirjoitusta-rauhassa)
  ;; (evil/n "i" 'kirjoita-rauhassa)
  ;; (evil/i "C-ö" 'poistu-ja-näytä-rivi)

#+END_SRC 

* Smartparens
Erilaisten sulkujen ja sitaattien hallintaan.
#+BEGIN_SRC emacs-lisp
(require 'smartparens)
(smartparens-global-mode t) ; Kytke moodi päälle globaalisti
(setq show-paren-mode t)
(setq sp-highlight-pair-overlay nil) ; Poista highlightaus sulkujen sisältä.

(show-paren-mode 1) ; Näytä mätsäävät sulkuparit

#+END_SRC 
** Sulkujen sisällä liikkuminen
#+BEGIN_SRC emacs-lisp

  (evil/i "å <SPC>" 'sp-up-sexp)
#+END_SRC 
** Yhdistä ja pura sulkuja
#+name: unite-sulut
| Näppäinyhdistelmä | Funktio                 |
|-------------------+-------------------------|
| åbs               | 'sp-join-sexp           |
| åbf               | 'sp-forward-slurp-sexp  |
| åbb               | 'sp-backward-slurp-sexp |
| åba               | 'sp-add-to-next-sexp    |
| åbe               | 'sp-forward-barf-sexp   |
| åbt               | 'sp-backward-barf-sexp  |
| åbu               | 'sp-unwrap-sexp         |
| åbk               | 'sp-kill-whole-line     |
#+BEGIN_SRC emacs-lisp :exports code :var unite-sulut=unite-sulut
(taulukko-eval 'evil/n unite-sulut t)
#+end_SRC
** Luo sulkuja
#+name: sulkujen-luonti
| Näppäinyhdistelmä | Funktio         |
|-------------------+-----------------|
| åbr               | 'sp-wrap-round  |
| åbc               | 'sp-wrap-curly  |
| åbs               | 'sp-wrap-square |
#+BEGIN_SRC emacs-lisp :exports code :var sulkujen-luonti=sulkujen-luonti
  (taulukko-eval 'evil/v sulkujen-luonti t)
#+END_SRC 

** Lispit
Lisp-murteilla usein ' ja `-symbolit vaativat usein, että asetetaan ilman
vastinparia sulkujen tai symbolin eteen. Alla olevasta kiitos Chris Allenille (bytemyapp).
#+BEGIN_SRC emacs-lisp

(sp-with-modes sp--lisp-modes
  ;; disable ', it's the quote character!
  (sp-local-pair "'" nil :actions nil)
  ;; also only use the pseudo-quote inside strings where it serve as
  ;; hyperlink.
(sp-local-pair "`" "'" :when '(sp-in-string-p)))

#+END_SRC 

** Python
Pythonissa on kolmen """-merkin yhdistelmiä, jolla saadaan monirivisiä kommentteja.

#+BEGIN_SRC emacs-lisp
(defun uusi-rivi-ja-sisennä (id action context)
 (when (eq action 'insert)
  (newline)
  (newline)
  (indent-according-to-mode)
  (previous-line)
  (indent-according-to-mode)))


(sp-with-modes '(python-mode)

  (sp-local-pair "\"\"\"" "\"\"\"" :post-handlers '(:add uusi-rivi-ja-sisennä)))

#+END_SRC 

** C-kielet
C-kielten kommenteille tarvitaan seuraavaa:

#+BEGIN_SRC emacs-lisp
(defun asteriski-kommentti
  (id action context)
  (when (eq action insert)
    (progn
      (insert "*")
      (save-excursion
	(insert "\n")
	(indent-according-to-mode))
      (indent-according-to-mode))))

(sp-with-modes '(c-mode c++-mode java-mode javascript-mode)

  (sp-local-pair "/*" "*/" :post-handlers '(:add uusi-rivi-ja-sisennä
						 (asteriski-kommentti "RET"))))

#+END_SRC 

* Keychord
Painamalla simultaanisti kahta nappulaa, voit käyttää hyväksi tiettyjä
erikoisominaisuuksia. Osa näistä ominaisuuksista on tehty käytettäväksi vain
tietyissä minor modeissa.
* Popup
** Perusasetukset
En ole saanut tätä skulaamaan vielä ollenkaan. Ota projektiksi.

#+BEGIN_SRC emacs-lisp

(require 'popup)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(provide 'popup-complete)

#+END_SRC 

* Kalenteri
Kalenteriin tehtävät asetukset tänne.
** Yleiset asetukset

#+BEGIN_SRC emacs-lisp

  (evil-set-initial-state 'calendar-mode 'emacs) ; Poista Evil-mode kalenteriin siirryttäessä

  (defmacro calendarmap (key func)
  `(define-key calendar-mode-map (kbd ,key) (quote ,func)))

  (define-key calendar-mode-map (kbd tapa-aukioleva-buffer) 'kill-this-buffer) 
  (calendarmap seuraava-buffer next-buffer)
  (calendarmap edellinen-buffer previous-buffer)

#+END_SRC 

** Päivän etsintä

#+BEGIN_SRC emacs-lisp

(calendarmap "l" calendar-forward-day)
(calendarmap "h" calendar-backward-day)
(calendarmap "j" calendar-forward-week)
(calendarmap "k" calendar-backward-week)

(calendarmap "L" calendar-forward-month)
(calendarmap "H" calendar-backward-month)
(calendarmap "J" calendar-forward-year)
(calendarmap "K" calendar-backward-year)

#+END_SRC 

** Suomenkieliset nimet
Aseta eurooppalainen tyyli, suomalaiset päivä- ja kuukauden-
nimet jne.

#+BEGIN_SRC emacs-lisp

  (add-hook 'calendar-load-hook
        (lambda ()
           (calendar-set-date-style 'european)))

  (setq calendar-week-start-day 1
	calendar-day-name-array ["su" "ma" "ti" "ke" 
				 "to" "pe" "la"])
  (setq calendar-month-name-array ["Tammikuu" "Helmikuu" "Maaliskuu" "Huhtikuu"
				   "Toukokuu" "Kesäkuu" "Heinäkuu" "Elokuu"
				   "Syyskuu" "Lokakuu" "Marraskuu" "Joulukuu"])



#+END_SRC 

* Minibuffer
** Näppäinlyhenteet

#+BEGIN_SRC emacs-lisp

  (defmacro minibufmap (key func)
    `(define-key minibuffer-local-map (kbd ,key) ,func))

  (minibufmap "¨d" (lambda () (interactive)(insert "$")))
  (minibufmap "¨." (lambda () (interactive)(insert "¨")))
  (minibufmap "¨s" (lambda () (interactive)(insert "\\")))
  (minibufmap "¨q" (lambda () (interactive)(insert "\"")))



#+END_SRC
* Ibuffer
Ibuffer kytketään päälle buffer-valikko-muuttujan avulla.
** Järjestely
Bufferit voidaan järjestellä Ibufferissa valutun teeman mukaan.
#+BEGIN_SRC emacs-lisp

  (setq ibuffer-saved-filter-groups
	(quote
	 (("default"
	   ("Konfigurointi" (or
			     (name . "^emacs.org$")
			     (name . "^\\*scratch\\*$")))
	   ("Gradu" (or
		     (name . "gradu*")))
	   ("Python" (or
		      (name . "*.py$")
		      (mode . python-mode)))
	   ("R" (or
		 (name . "*.r$")
		 (name . "*.R$")))
	   ("Dired-kansiot" (mode . dired-mode))))))

  (add-hook 'ibuffer-mode-hook
		(lambda ()
		  (ibuffer-switch-to-saved-filter-groups "default")))


#+END_SRC 

* Ivy 
Ivylle tarkoitetut asetukset tähän. Counsel on työkalu, joka ajaa Helmin tukemat asiat.
** Ivy
#+BEGIN_SRC emacs-lisp

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

#+END_SRC 

** Swiper
Korvaa Emacsin oletushaku Swiperilla.

#+name: swiper-taulu
| Näppäinyhdistelmä | Funktio |
|-------------------+---------|
| C-s               | 'swiper |
#+BEGIN_SRC emacs-lisp :exports code :var swiper-taulu=swiper-taulu
(taulukko-eval 'evil/n swiper-taulu t)
#+end_SRC

#+RESULTS:
| C-s | 'swiper |

** Counsel
*** Kytke päälle
#+BEGIN_SRC emacs-lisp

(require 'counsel)
(counsel-mode 1)

#+END_SRC 

*** Autocompletion
Counsel-company tarjoaa mahdollisuuden etsiä vaihtoehtoja joukosta.
#+name: counsel-autokompleetio
| Näppäinyhdistelmä | Funktio          |
|-------------------+------------------|
| åd                | 'counsel-company |
#+BEGIN_SRC emacs-lisp :exports code :var counsel-autokompleetio=counsel-autokompleetio
(taulukko-eval 'evil/i counsel-autokompleetio t)
#+end_SRC

#+RESULTS:
| åd | 'counsel-company |

* Helm
Helm on yhtenäinen standardi, jonka avulla voi hakea melkein kaikenlaista. Otettu toistaiseksi pois käytöstä muussa kuin Googlehaussa.

#+BEGIN_SRC emacs-lisp

  (require 'helm)
  ;; (helm-mode 1)

  ;; (defmacro helmmap (key func)
  ;;     `(define-key helm-map (kbd ,key) (quote ,func)))

  ;; (helmmap "C-j" helm-next-line)
  ;; (evil/n buffer-valikko helm-buffers-list)
  ;; (helmmap "C-u" helm-find-files-up-one-level)

#+END_SRC 

* Yasnippets
Tähän liittyvät asetukset, muut kuin pikanäppäimet snippettien luomiselle.
** Varoitukset
Lähtökohtaisesti Emacs varoittaa, kun buffer muokkaa backquote-merkkien sisällä
olevaa lausetta (backquote-merkkien sisälle tulee Elisp-funktiot, jotka
evaluoidaan). Kytke tässä varoitus pois päältä.
#+BEGIN_SRC emacs-lisp

(add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+END_SRC 

** Lopeta sisennys / indentointi
#+BEGIN_SRC emacs-lisp

(setq yas/indent-line nil)

#+END_SRC 

* Search / haku 
Hakumoodiin tarkoitetut asetukset. Tässä tavalliset Macin näppäinyhdistelmät käytössä, koska haku-toiminnot eivät hyväksy
prefix-näppäimiksi muita kuin Ctrl, Alt jne.
** Näppäinoikotiet

#+BEGIN_SRC emacs-lisp

  (defmacro hakumap (key func)
      `(define-key isearch-mode-map (kbd ,key) ,func))

  (defmacro keytrans (key1 key2)
      `(define-key key-translation-map (kbd ,key1) (kbd ,key2)))

  (hakumap "C-¨ d" (lambda () (interactive)(insert "$")))
  (hakumap "C-¨ ." (lambda () (interactive)(insert "¨")))
  (hakumap "C-¨ s" (lambda () (interactive)(insert "\\")))
  (hakumap "C-¨ q" (lambda () (interactive)(insert "\"")))
  (keytrans "M-(" "{")
  (keytrans "M-)" "}")
  (keytrans "M-8" "[")
  (keytrans "M-9" "]")
  (keytrans "M-2" "@")
  (keytrans "M-4" "$")
  (keytrans "M-7" "|")
  (keytrans "M-/" "\\")
#+END_SRC 

* Package-menu
Package Menu moodin asetukset

** Bufferit, ikkunat ja liikkuminen
#+BEGIN_SRC emacs-lisp

  (defmacro packmap (key func)
    `(define-key package-menu-mode-map (kbd ,key) (quote ,func)))

  (packmap "j" next-line)
  (packmap "k" previous-line)
  (packmap seuraava-buffer next-buffer)
  (packmap edellinen-buffer previous-buffer)
  (packmap buffer-valikko buffer-menu)
  (packmap tapa-aukioleva-buffer kill-this-buffer)
  (packmap "h" backward-char)
  (packmap "l" forward-char)
  (packmap poista-muut-ikkunat delete-other-windows)
  (packmap poista-aktiivinen-ikkuna delete-window)
  (packmap "'" evil-search-forward)
  (packmap "+" evil-search-backward)


#+END_SRC 

** Pakettien lataus

#+BEGIN_SRC emacs-lisp

  (packmap "i" package-install)

#+END_SRC 

* Git / Magit
Magit-pikanäppäimet löytyvät Evil-mode-valikon alta.
** Commit-editointi
#+BEGIN_SRC emacs-lisp
(require 'with-editor)
(define-key with-editor-mode-map "ås" 'with-editor-finish)

#+END_SRC 
** Stage
Miten stageus-vaihe tapahtuu.

#+BEGIN_SRC emacs-lisp

(evil/n "ågta" 'magit-stage-modified) ; Stageta kaikki
(evil/n "ågtt" 'magit-stage) ; Stageta aukioleva tiedosto
(evil/n "ågtf" 'magit-stage-file) ; Stageta mielivaltainen tiedosto

#+END_SRC 

** Commit
Tee commit.

#+BEGIN_SRC emacs-lisp

(evil/n "ågc" 'magit-commit-popup)

#+END_SRC 

** Push/pull
Työnnä ja vedä Githubista tai tee vastaavaa jonkun muun
branchin kanssa.

#+name: pushpull
| Näppäinyhdistelmä | Funktio                         |
|-------------------+---------------------------------|
| ågpsh             | 'magit-push-current-to-upstream |
| ågpsb             | 'magit-push                     |
| ågplh             | 'magit-pull-from-upstream       |
| ågplb             | 'magit-pull                     |

#+BEGIN_SRC emacs-lisp :exports code :var pushpull=pushpull

  ;; (evil/n "ågpsh" 'magit-push-current-to-upstream)
  ;; (evil/n "ågpsb" 'magit-push)
  ;; (evil/n "ågplh" 'magit-pull-from-upstream)
  ;; (evil/n "ågplb" 'magit-pull)

  ;; (mapc (lambda (x) (lue-merkki-pari x 'evil/n t)) pushpull)
  (dolist (i pushpull)
    (lue-merkki-pari i 'evil/n t))
#+END_SRC 

#+RESULTS:

** Branchien luonti
Luo ja checkouttaa uusiin brancheihin.
#+name: git-branch-luonti
| Näppäinyhdistelmä | Funktio                |
|-------------------+------------------------|
| ågbb              | 'magit-branch          |
| ågbc              | 'magit-branch-checkout |
| ågbr              | 'magit-branch-rename   |
| ågo               | 'magit-branch-checkout |
#+BEGIN_SRC emacs-lisp :exports code :var git-branch-luonti=git-branch-luonti
  (taulukko-eval 'evil/n git-branch-luonti t)
#+end_SRC

** Evil-näppäimet
#+BEGIN_SRC emacs-lisp

(require 'evil-magit)

#+END_SRC 

* Helm
Helm on kykenevä etsintätyökalu. "M-x" on varattu toistaiseksi
paketin omalle funktiovalikolle, laita tänne muita juttuja.
** Google-haku
Hae google-tuloksia nopeasti.

#+BEGIN_SRC emacs-lisp

(evil/n "åqg" 'helm-google)

#+END_SRC 

* Elfeed
Newsfeed Emacsin sisällä. Tee tänne asetukset sen varalta. Itse newsfeedit tulevat tiedostoon [[file:/Users/tommi/.emacs.d/elfeed.org][elfeed.org]].
** Elfeed-org
Aseta org-tiedosto, jossa voi hallita kaikkia seurattavia feedejä helposti.

#+BEGIN_SRC emacs-lisp

(require 'elfeed-org)

(elfeed-org)

(setq rmh-elfeed-org-files (list "/Users/tommi/.emacs.d/elfeed.org"))

#+END_SRC 

** Seurattavat sivut

#+BEGIN_SRC emacs-lisp

(setq elfeed-feeds
  '("http://noahpinionblog.blogspot.com/feeds/posts/default/"
    "http://johnhcochrane.blogspot.com/feeds/posts/default/"
    "http://newmonetarism.blogspot.com/feeds/posts/default/"
   ))

#+END_SRC 

* ESS
R-ohjelmointia varten tarkoitetut asetukset
** Skriptin ajaminen
#+BEGIN_SRC emacs-lisp
(require 'ess)
(require 'ess-site)
(defmacro essmap (key func)
  `(define-key ess-mode-map (kbd ,key) (quote ,func)))

(essmap "årr" ess-eval-region-or-function-or-paragraph-and-step)
(essmap "årl" ess-load-file)

(setq ess-eval-visibly 'nowait) ; Redditissä suositeltiin tätä https://www.reddit.com/r/emacs/comments/8gr6jt/looking_for_tips_from_r_coders_who_use_ess/
#+END_SRC 

** R-konsoli
#+BEGIN_SRC emacs-lisp

  (add-hook 'inferior-ess-mode-hook
      (lambda ()(interactive)
	    (evil/i "C-b"
		'comint-previous-matching-input-from-input)
	    (evil/i "C-f"
		'comint-next-matching-input-from-input)
	    ;(define-key inferior-ess-mode-map [\C-x \t]
		;'comint-dynamic-complete-filename)
       )
   )

#+END_SRC 

** Autocompletion
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
(define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
(setq ess-use-auto-complete t)
(setq ess-first-tab-never-complete 'unless-eol)

(defun my-ess-hook ()
  ;; ensure company-R-library is in ESS backends
  (make-local-variable 'company-backends)
  (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
  (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
        company-backends))

(add-hook 'ess-mode-hook 'my-ess-hook)
#+END_SRC 

** Dokumentaatio
#+BEGIN_SRC emacs-lisp

(evil-define-key 'normal 'ess-mode-map (kbd "åd") 'ess-display-help-on-object)

#+END_SRC 

* Help- ja Info-mode
Käytä näitä kun olet info-tilassa (esim. luet Elisp-manuaalia)
tai olet help-tilassa (haet apua jonkun funktion määrittelyyn esim).

** Makrot
#+BEGIN_SRC emacs-lisp

(def-avain helpmap help-mode-map)
(def-avain infomap Info-mode-map)
(def-avain esshelpmap ess-help-mode-map)

#+END_SRC 

** Ikkunoiden hallinta
Liiku ikkunoiden välillä ja sulje niitä. Pyri pitämään nämä samoina kuin Evil-moden
ikkunoiden hallintatyökalut.

#+BEGIN_SRC emacs-lisp

  ;; (defmacro helpmap (key func)
  ;;     `(define-key help-mode-map (kbd ,key) (quote ,func)))

  ;; (defmacro infomap (key func)
  ;;     `(define-key Info-mode-map (kbd ,key) (quote ,func)))


 
(helpmap "öö" 'ace-window)
(helpmap pilko-ikkuna-horisontaalisesti 'split-window-horizontally)
(helpmap pilko-ikkuna-vertikaalisesti 'split-window-vertically)(infomap poista-aktiivinen-ikkuna 'delete-window)
(helpmap poista-aktiivinen-ikkuna 'delete-window)
(helpmap poista-muut-ikkunat 'delete-other-windows)
(infomap "öö" 'ace-window)
(infomap pilko-ikkuna-horisontaalisesti 'split-window-horizontally)
(infomap pilko-ikkuna-vertikaalisesti 'split-window-vertically)
(infomap poista-muut-ikkunat 'delete-other-windows) 

;; evil-window-kommentoitu, koska sen toiminta ei ole taattua tiloissa, joissa
;; Evil-modea ei ole.
  
(esshelpmap pilko-ikkuna-horisontaalisesti 'split-window-horizontally)
(esshelpmap poista-aktiivinen-ikkuna 'delete-window)
(esshelpmap pilko-ikkuna-vertikaalisesti 'split-window-vertically)
(esshelpmap poista-muut-ikkunat 'delete-other-windows)
(esshelpmap "öö" 'ace-window)
 
#+END_SRC 
** Bufferien hallinta
Hallitse buffereita kuten tekisit normaalien tekstitiedostojen tapauksessa. Pyri
pitämään nämä synkronoituna tavallisten Evil-moden buffereiden hallintatyökalujen kanssa.
Näppäinyhdistelmissä käytettävät muuttujat löytyvät osiosta Globaalit muuttujat > Bufferit.

#+BEGIN_SRC emacs-lisp

  (infomap buffer-valikko 'buffer-menu)
  (infomap tapa-aukioleva-buffer 'kill-this-buffer)
  (helpmap buffer-valikko 'buffer-menu)
  (helpmap tapa-aukioleva-buffer 'kill-this-buffer)
  (infomap seuraava-buffer 'switch-to-next-buffer)
  (infomap edellinen-buffer 'switch-to-prev-buffer)
  (helpmap seuraava-buffer 'switch-to-next-buffer)
  (helpmap edellinen-buffer 'switch-to-prev-buffer)

#+END_SRC 
** Liikkuminen
#+BEGIN_SRC emacs-lisp

(esshelpmap "j" 'next-line)
(esshelpmap "k" 'previous-line)
(esshelpmap "zj" 'scroll-up)
(esshelpmap "zk" 'scroll-down)

#+END_SRC 

* Regexp Builder
Rakenna säännöllisiä lausekkeita minibufferissa ja käytä niitä hyödyksi.
** Säännöllisten lausekkeiden rakentaminen
Shortcutti, jonka avulla saadaan äkkiä kaksi takakenoviivaa.
#+name: lisää-regex
| Näppäinyhdistelmä | Lopputulos        |
|-------------------+-------------------|
| åk                | (kirjoita "\\\\") |
#+BEGIN_SRC emacs-lisp :exports code :var lisää-regex=lisää-regex
  (taulukko-eval 'evil/i lisää-regex t)
#+end_SRC

#+RESULTS:
| åk | (kirjoita "\\\\") |

** Pikanäppäimet
#+BEGIN_SRC emacs-lisp :exports code 
  (defun regexp-kartta (key func)
    `(evil-define-key 'normal reb-mode-map (kbd ,key) ,func)) 

  (regexp-kartta "öä" 'reb-quit)
  (regexp-kartta "åf" (lambda () (message "Heihou letsgou!")))

  ;;(taulukko-eval 'regexp-kartta regexpit t)
#+end_SRC

** Kustomoidut regexpit
Tähän omat säännölliset lausekkeet
#+name: omat-regexpit
| Lauseke                                                                                   | Haettava pattern |
|-------------------------------------------------------------------------------------------+------------------|
| ^\\(\\[\\)[0-9a-z;.\s\\[\\]\\{1,\\}\\(\\]\\[\\)?\\(\\]\\*\\[\\)?[0-9a-z;.\s]*\\(\\]\\)'?$ | 're-matriisi     |
|                                                                                           |                  |
#+BEGIN_SRC emacs-lisp :exports code :var omat-regexpit=omat-regexpit
  ;; (taulukko-eval 'aseta omat-regexpit t)
#+end_SRC

* Google Translate
#+BEGIN_SRC emacs-lisp

(require 'google-translate)
(require 'google-translate-default-ui)
(evil/n "åqt" 'google-translate-query-translate)
(evil/n "åql" 'google-translate-at-point)

#+END_SRC 

#+RESULTS:
: google-translate-at-point
* Company
Company tarjoaa tekstintäydennystä (autocompletion) lennosta.
#+BEGIN_SRC emacs-lisp

  (require 'company)

#+END_SRC 

** Väriteema
#+BEGIN_SRC emacs-lisp

  (custom-set-faces
       '(company-preview
	 ((t (:foreground "darkgray" :underline t))))
       '(company-preview-common
	 ((t (:inherit company-preview))))
       '(company-tooltip
	 ((t (:background "lightgray" :foreground "black"))))
       '(company-tooltip-selection
	 ((t (:background "steelblue" :foreground "white"))))
       '(company-tooltip-common
	 ((((type x)) (:inherit company-tooltip :weight bold))
	  (t (:inherit company-tooltip))))
       '(company-tooltip-common-selection
	 ((((type x)) (:inherit company-tooltip-selection :weight bold))
	  (t (:inherit company-tooltip-selection)))))

#+END_SRC 

* whch-key
Näytä popup-valikossa saatavilla olevat näppäinyhdistelmät.
** Aseta päälle
#+BEGIN_SRC emacs-lisp

  (require 'which-key)
  (which-key-mode 1)
#+END_SRC 
** Kustomoi ohjeistusta
Sen sijaan, että which-key näyttää popup-valikossa funktioiden nimet, se voi näyttää 
ohjeeen siitä, mitä painike tekee.
*** Makro
#+BEGIN_SRC emacs-lisp

  (defalias 'whichmajor 'which-key-add-major-mode-key-based-replacements)
  (defalias 'whichcommon 'which-key-add-key-based-replacements)

#+END_SRC

*** Yleiset
Gitiin liittyvät asetukset Magit-osiossa.

#+NAME: yleinen-which
| Yhdistelmä | Kuvaus                  |
|------------+-------------------------|
| ås         | Tallenna                |
| åhf        | Katso funktio           |
| åhk        | Katso näppäinyhdistelmä |
| åhv        | Katso globaali muuttuja |
| ånm        | Uusi kirjanmerkki       |
| åns        | Uusi koodisnippet       |
| åv         | Katso agenda            |

#+BEGIN_SRC emacs-lisp :exports code :var data=yleinen-which
  (mapc (lambda (x) (whichcommon (car x) (cadr x))) data)
#+END_SRC 

*** Org

#+BEGIN_SRC emacs-lisp

  (whichmajor 'org-mode
    "ta" "Ajanhallinta"
    "tad" "Aseta deadline"
    "tas" "Aseta aikataulutus"
    "tat" "Aseta yleinen timestamp"
    "te" "Vie toiseen muotoon"
    "tl" "Laskentataulukko"
    "tla" "Refreshaa taulukko"
    "tls" "Sorttaa taulukko"
    "to" "Avaa linkki"
    "ts" "Muokkaa koodia"
    "tt" "Aseta tägi"
    )

#+END_SRC 

*** Magit
#+name: magit-komennot
| Yhdistelmä | Kuvaus                     |
|------------+----------------------------|
| åg         | Git/Magit                  |
| ågc        | Git commit                 |
| ågs        | Git status                 |
| ågt        | Git stage/add              |
| ågta       | Stageta kaikki seurattavat |
| ågtt       | Stageta aukioleva tiedosto |
| ågtf       | Stageta haluttu tiedosto   |
| ågp        | Push/pull                  |
| ågps       | Git push                   |
| ågpl       | Git pull                   |
| ågpsh      | Työnnä Githubiin tms       |
| ågpsb      | Työnnä haluttuun branchiin |
| ågplh      | Vedä Githubista tms        |
| ågplb      | Vedä halutusta branchista  |
| ågo        | Checkout/vaihda branchiin  |
| ågbb       | Katso branchit             |
| ågbc       | Checkout/vaihda branchiin  |
| ågbr       | Nimeä branch uudelleen     |

#+BEGIN_SRC emacs-lisp :exports code :var magit-komennot=magit-komennot
(mapc (lambda (x) (whichcommon (car x) (cadr x))) magit-komennot)
#+end_SRC

#+RESULTS:
| åg    | Git/Magit                  |
| ågc   | Git commit                 |
| ågs   | Git status                 |
| ågt   | Git stage/add              |
| ågta  | Stageta kaikki seurattavat |
| ågtt  | Stageta aukioleva tiedosto |
| ågtf  | Stageta haluttu tiedosto   |
| ågp   | Push/pull                  |
| ågps  | Git push                   |
| ågpl  | Git pull                   |
| ågpsh | Työnnä Githubiin tms       |
| ågpsb | Työnnä haluttuun branchiin |
| ågplh | Vedä Githubista tms        |
| ågplb | Vedä halutusta branchista  |
| ågo   | Checkout/vaihda branchiin  |
| ågbb  | Katso branchit             |
| ågbc  | Checkout/vaihda branchiin  |
| ågbr  | Nimeä branch uudelleen     |
#+END_SRC 
*** Queryt
#+name: queryt
| Yhdistelmä | Kuvaus                        |
|------------+-------------------------------|
| åq         | Tee query                     |
| åqt        | Käännä lause                  |
| åql        | Käännä sana kursorin kohdalla |
| åqc        | Emacs laskin                  |
| åqg        | Google-haku                   |

#+BEGIN_SRC emacs-lisp :exports code :var queryt=queryt

(mapc (lambda (x) (whichcommon (car x) (cadr x))) queryt)

#+END_SRC 

#+RESULTS:
| åq  | Tee query                     |
| åqt | Käännä lause                  |
| åql | Käännä sana kursorin kohdalla |
| åqc | Emacs laskin                  |
| åqg | Google-haku                   |

* Hiiri
Poista hiiri käytöstä.
#+BEGIN_SRC emacs-lisp

(mouse-wheel-mode -1)

#+END_SRC 

* Statusbar
Powerline-paketilla alla olevan palkin saa parempaan kuosiin.
** Powerline
#+BEGIN_SRC emacs-lisp

  (require 'powerline)

#+END_SRC 

** Teema
#+BEGIN_SRC emacs-lisp
  ;; (powerline-center-evil-theme)

  ;; (setq powerline-arrow-shape 'curve)

  ;; (custom-set-faces
   ;; '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
   ;; '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

  (set-face-attribute 'mode-line nil
		      :background "#660066"
		      :box nil)

  ;; (setq powerline-color1 "grey22")
  ;; (setq powerline-color2 "grey40")


#+END_SRC 

** Omat informaatiot
Kunnia tästä emacs-fulle (http://emacs-fu.blogspot.com)
#+BEGIN_SRC emacs-lisp
    (display-battery-mode 1)

    ;; (setq global-mode-string (concat display-time-string ", akkua " battery-mode-line-string "%%]"))
  ;;   (setq mode-line-format
  ;; 	(list
  ;; 	 "%b"
  ;; 	 " --- "
  ;; 	 "%m: "
  ;; 	 " --- "
  ;; 	 "rivi %l "
  ;; 	 " --- "
  ;; 	 "klo %M"
  ;; 	 ))
  (defun meitsin-status-bar ()
  "Tämä näkyy bufferin alalaidassa."  
  (interactive)
  ;; Vaihda ensin taustaväri purppuraiseksi.
  (set-face-attribute 'mode-line nil
		      :background "#660066"
		      :foreground "White"
		      :box nil)
  ;; Hoida tämän jälkeen itse informaatioiden asettelu kuntoon.
  (setq mode-line-format
    (list
      ;; the buffer name; the file name as a tool tip
      '(:eval (propertize "%b " 'face 'font-lock-keyword-face
	  'help-echo (buffer-file-name)))

      ;; line and column
      "(" ;; '%02' to set to 2 chars at least; prevents flickering
	(propertize "%02l" 'face 'font-lock-type-face) ","
	(propertize "%02c" 'face 'font-lock-type-face) 
      ") "

      ;; relative position, size of file
      "["
      (propertize "%p" 'face 'font-lock-comment-face) ;; % above top
      "/"
      (propertize "%I" 'face 'font-lock-comment-face) ;; size
      "] "

      ;; the current major mode for the buffer.
      "["

      '(:eval (propertize "%m" 'face 'font-lock-string-face
		'help-echo buffer-file-coding-system))
      "] "

      '(:eval (propertize (concat (format-time-string "%a, %d.%m.%Y") ", klo " (format-time-string "%H:%M"))
		'help-echo
		(concat (format-time-string "%c; ")
			(emacs-uptime "Uptime:%hh"))))


      "[" ;; insert vs overwrite mode, input-method in a tooltip
      '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
		'face 'font-lock-preprocessor-face
		'help-echo (concat "Buffer is in "
			     (if overwrite-mode "overwrite" "insert") " mode")))

      ;; was this buffer modified since the last save?
      '(:eval (when (buffer-modified-p)
		(concat ","  (propertize "Mod"
			       'face 'font-lock-warning-face
			       'help-echo "Buffer has been modified"))))

      ;; is this buffer read-only?
      '(:eval (when buffer-read-only
		(concat ","  (propertize "RO"
			       'face 'font-lock-type-face
			       'help-echo "Buffer is read-only"))))  
      "] "

      ;; Näytä sen hetkinen Git-branch
      '(vc-mode vc-mode)

      ;; add the time, with the date and the emacs uptime in the tooltip
      " --"
      ;; i don't want to see minor-modes; but if you want, uncomment this:
      ;; minor-mode-alist  ;; list of minor modes
      "%-" ;; fill with '-'
      )))



#+END_SRC 

** Minor mode palkille
Tämän minor moden ansiosta kustomoitu palkki näkyy kaikissa buffereissa. Tässä on monta vaihetta, mutta peruslogiikka
on seuraava:
 1) Luo ensin oma minor mode
 2) Määrittele hook, eli mikä funktio ajetaan kun mode kytketään päälle
 3) Luo minor modesta globaali versio, joka aktivoituna pysyy kaikissa buffereissa
 4) Kytke globaali minor mode päälle, ja voilà!

_Noppitieto_: palkki-mode on meikäläisen ensimmäinen oma minor mode (luotu Su, 8.7.2018 n. klo 12:00)
#+BEGIN_SRC emacs-lisp
  (define-minor-mode palkki-mode
    "Näytä kustomoitu statusbar."
    :lighter "Palkki"
    :init-value nil
    )

  (add-hook 'palkki-mode-hook 'meitsin-status-bar)
  
  (define-global-minor-mode palkki-global-mode palkki-mode
    (lambda ()(interactive)(palkki-mode 1)))

  (palkki-global-mode)
#+END_SRC 

* SQL
** Konsoli
#+BEGIN_SRC emacs-lisp

  (defmacro repl-koukku (moodi)
    "Aseta MOODIlle, joka käyttää REPLiä eli konsolia bufferissa, peruskoukut."
    `(add-hook (quote ,moodi)
	 (lambda ()(interactive)
	    (evil/i "C-b"
		'comint-previous-matching-input-from-input)
	    (evil/i "C-f"
		    'comint-next-matching-input-from-input))))

  (repl-koukku sql-interactive-mode-hook)


#+END_SRC 

* Elmacro
Elmacro on työkalu, joka näyttää näppäinmakrot Elisp-funktioina

#+BEGIN_SRC emacs-lisp

(require 'elmacro)
(elmacro-mode)

#+END_SRC 

* Projectile
Projektienhallintaan tarkoitettu työkalu.
#+BEGIN_SRC emacs-lisp

(projectile-mode +1)
;; (define-key projectile-mode-map "åpr" 'projectile-command-map)

#+END_SRC 

* Musiikki
EMMS vastaa musiikinhallinnasta Emacsilla.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/elisp/emms/")
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/Music/Lataukset/")
#+END_SRC 

* Compilation-mode
Moodi, joka tulee esim. LaTeX-kääntämisen lopputuloksena tai kun org-mode käännetään LaTeXiin
#+BEGIN_SRC emacs-lisp

  (defmacro compile-map (key func)
    `(define-key compilation-mode-map (kbd ,key) (quote ,func)))

#+END_SRC 
** Buffer ja ikkunat
#+BEGIN_SRC emacs-lisp

  (compile-map buffer-valikko 'buffer-menu)
  (compile-map tapa-aukioleva-buffer 'ido-kill-buffer)
  (compile-map seuraava-buffer 'switch-to-next-buffer)
  (compile-map edellinen-buffer 'switch-to-prev-buffer)
  (compile-map pilko-ikkuna-horisontaalisesti 'split-window-horizontally)
  (compile-map pilko-ikkuna-vertikaalisesti 'split-window-vertically)
  (compile-map poista-aktiivinen-ikkuna 'delete-window)
  (compile-map poista-muut-ikkunat 'delete-other-windows)
  (compile-map "öö" 'ace-window)

#+END_SRC 

* Ikonit
#+BEGIN_SRC emacs-lisp

  (require 'all-the-icons)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC 

* Eshell
Eshellille tarkoitetut asetukset tulevat tänne
** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-ä") 'eshell)

#+END_SRC 
** Komentohistorian selaaminen
Tämä ei ota onnistukaseen vielä. Käytä M-up, M-down -komentoja.
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda () (evil/i "C-b" 'eshell-previous-matching-input-from-input)))

#+END_SRC 
** Rivin manipulointi

#+BEGIN_SRC emacs-lisp

  ;; (evil/i "¨d" (kirjoita "$"))
  ;; (evil/i "¨." (kirjoita "¨"))
  ;; (evil/i "¨a" (kirjoita "@"))
  ;; (evil/i "¨f" (kirjoita "\\"))
  ;; (evil/i "¨c" (kirjoita "{}"))
  ;; (evil/i "¨q" (kirjoita "\"\""))

#+END_SRC 
** Tyyli
Kunnia kuuluu ekaschalkille (modernemacs.com)
*** Makrot
#+BEGIN_SRC emacs-lisp

(require 'dash)
(require 's)

(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                 (-> ,ICON
                    (concat esh-section-delim ,FORM)
                    (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat esh-header
          (-reduce-from 'esh-acc "" eshell-funcs)
          "\n"
          eshell-prompt-string))

#+end_src

*** Kustomointi

#+begin_src emacs-lisp
(esh-section esh-dir
             "\xf07c"  ;  (faicon folder)
             (abbreviate-file-name (eshell/pwd))
             '(:foreground "gold" :bold ultra-bold :underline t))

(esh-section esh-git
             "\xe907"  ;  (git icon)
             (magit-get-current-branch)
             '(:foreground "pink"))

(esh-section esh-python
             "\xe928"  ;  (python icon)
             pyvenv-virtual-env-name)

(esh-section esh-clock
             "\xf017"  ;  (clock icon)
             (format-time-string "%H:%M" (current-time))
             '(:foreground "forest green"))

;; Below I implement a "prompt number" section
(setq esh-prompt-num 0)
(add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add 'eshell-send-input :before
            (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             "\xf0c9"  ;  (list icon)
             (number-to-string esh-prompt-num)
             '(:foreground "brown"))

;; Separator between esh-sections
(setq esh-sep " | ")  ; or "   "

;; Separator between an esh-section icon and form
(setq esh-section-delim " ")

;; Eshell prompt header
(setq esh-header "\n ")  ; or "\n┌─"

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp " ")   ; or "└─> "
(setq eshell-prompt-string " ")   ; or "└─> "

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function 'esh-prompt-func)

#+END_SRC 

* Isot tiedostot
#+BEGIN_SRC emacs-lisp

(require 'vlf-setup)

#+END_SRC 

* Clojure
** Kääntäminen
#+BEGIN_SRC emacs-lisp
  (defmacro clojure-key (kbd func)
   `(evil-define-key 'normal clojure-mode-map (kbd ,kbd) ,func))
  
 
  (clojure-key "årr" (lambda () (interactive)(save-buffer)
		       (cider-load-buffer-and-switch-to-repl-buffer)))

  (clojure-key "årl" 'cider-eval-last-sexp)




  ;; (evil-define-key 'normal clojure-mode-map (kbd "årr")
    ;; (lambda () (interactive)(save-buffer)
      ;; (cider-load-buffer-and-switch-to-repl-buffer)))

#+END_SRC 

** Näppäimet ja sulut
#+BEGIN_SRC emacs-lisp

  (add-hook 'clojure-mode-hook
	    (lambda ()(interactive)
	      (smartparens-mode t)))

#+END_SRC 

** REPL
#+BEGIN_SRC emacs-lisp

  (defmacro cider-koukku (moodi)
    "Aseta MOODIlle, joka käyttää REPLiä eli konsolia bufferissa, peruskoukut."
    `(add-hook (quote ,moodi)
	 (lambda ()(interactive)
	    (evil/i "C-b"
		'cider-repl-backward-input)
	    (evil/i "C-f"
		    'cider-repl-forward-input)
	    (paredit-mode t)
	    )))

  (cider-koukku cider-mode-hook)

#+END_SRC 

* Laskin / calc
Emacsin oman laskimen asetukset.
** Pikalaskin

#+BEGIN_SRC emacs-lisp

  (setq laskin-painike "åc")

  (evil/n laskin-painike 'quick-calc)
  (evil/i laskin-painike 'quick-calc)

#+END_SRC 

** Laskin
Ota superlaskin / köyhän miehen Mathematica käyttöön
*** Pikanäppäin
#+BEGIN_SRC emacs-lisp

  (evil/n "åqc" 'calc)

#+END_SRC 

*** Ikkunat
#+BEGIN_SRC emacs-lisp
  (require 'calc)
  ;; (defmacro calcmap (key func)
  ;;     `(define-key calc-mode-map (kbd ,key) (quote ,func)))

  (def-avain calcmap calc-mode-map)

  (calcmap "öö" 'ace-window)

#+END_SRC 

* Monta kursoria
** Lataa
#+BEGIN_SRC emacs-lisp

  (require 'multiple-cursors)

#+END_SRC 

** Pikanäppäimet
#+name: monikursori
| Yhdistelmä | Funktio                     |
|------------+-----------------------------|
| "C-S-j"    | 'mc/mark-next-like-this     |
| "C-S-k"    | 'mc/mark-previous-like-this |
| "C-S-a"    | 'mc/mark-all-like-this      |
#+BEGIN_SRC emacs-lisp :exports code :var monikursori=monikursori
  (taulukko-eval 'evil/n monikursori t)
  (taulukko-eval 'evil/i monikursori t)
#+end_SRC
* Internet 
** w3m
Selainasetukset tähän. Tämä ei toimi kunnolla, koska w3m ei asentunut oikein.

#+BEGIN_SRC emacs-lisp

  ;; (setq browse-url-browser-function 'w3m-browse-url)
  ;; (autoload 'w3m-browse-url "w3m" "Pyydä www-selainta näyttämään URL." t)

#+END_SRC 

* Leikkikenttä
Laita tänne kaikkea höpsöttelyä.
#+name: sitaattimerkit
| Yhdistelmä | Funktio               |
|------------+-----------------------|
| ågg        | (kirjoita "Häppärää") |
#+BEGIN_SRC emacs-lisp :exports code :var sitaattimerkit=sitaattimerkit
(taulukko-eval 'evil/i sitaattimerkit t)
#+end_SRC

#+RESULTS:
| ågg | (kirjoita "Häppärää") |


#+BEGIN_SRC emacs-lisp
(message "Heihou")
#+END_SRC 
Lasketaan yhteen: 8.0
<2018-06-20 Ke>
<2018-06-21 To>

#+BEGIN_SRC emacs-lisp

  ;; (setq mode-line-format
  ;; 	(list
  ;; 	 "%b"
  ;; 	 " --- "
  ;; 	 "%m: "
  ;; 	 " --- "
  ;; 	 "rivi %l "
  ;; 	 " --- "
  ;; 	 "klo %M"
  ;; 	 ))


#+END_SRC 


# Local Variables:
# org-src-preserve-indentation: t
# End:
